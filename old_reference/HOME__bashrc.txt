
#prevents CTRL+S freezing the tty/virtual-console (ie. until CTRL+Q is hit)
#see:   stty -a | egrep 'start|stop'
stty start undef
stty stop undef

export EDITOR=/usr/bin/vim
export GREPHTML_GREPPER_EXEC=/usr/bin/ack
export GREPHTML_GREPPER_OPTIONS='-i'
export TZ=America/Los_Angeles
export WINEARCH=win32
ack="--color --group"
shield_mount_dir='/home/user/Documents/shield_mapper_mount'
UINT64_MAX='18_446_744_073_709_551_615'
export bash1='/home/user/Documents/bash.1.txt'
export d2share='/usr/local/share/diablo-2-tools/'
export dict=/usr/share/dict/american-english-allascii
export words=$dict
export dir_lorem_ipsum='/home/user/Documents/lorem-ipsum'
export git='/home/user/Documents/Github-repos'
export art="$git/artwork-software-exhibit"
export LIVE_todo="$git/LIVE/todo"
export debian="$git/debian-fresh"
export debian2="$debian"
export music='/home/user/Documents/mp3s'
export perl_cheatsheet='/home/user/Documents/Github-repos/p5p7p3-cheatsheets/perl-cheat-sheet.txt'
export php_cheatsheet='/home/user/Documents/Github-repos/p5p7p3-cheatsheets/php-cheat-sheet.txt'
export python_cheatsheet='/home/user/Documents/Github-repos/p5p7p3-cheatsheets/python-cheat-sheet.txt'
export photos='/home/user/Documents/STATIC-photos'
export pictures=$photos
export videos='/home/user/Documents/STATIC-videos-saved'
export saved_videos=$videos
export screenshots='/home/user/Documents/screenshots'
export temp1='/home/user/Documents/temp'
export tmp1='/home/user/Documents/tmp'
export temp2="$tmp1"
export tmp2="$temp1"
export TODOdir='/home/user/Documents/TODO'
export txt_lorem_ipsum='/home/user/Documents/lorem-ipsum.1.txt'
export url_urbandictionary='https://api.urbandictionary.com/v0/define?term'
export url_utf8_codes='https://www.compart.com/en/unicode/U'
export url_wikipedia='https://en.wikipedia.org/wiki/Special:Search?search'
export url_wiktionary='https://en.wiktionary.org/wiki'
export weechat_logs='/home/user/.weechat/logs'
export www='/home/user/Documents/Share/github_com-plus-albany_net-httpd-www'
export youtube='/home/user/Documents/youtube-downloads'
alias ..='cd ..'
alias apt-download='apt download'
alias bash-history-clear='echo ">~/.bash_history;history -c;exit"'
alias bash-linter-checker='echo bash -n'
alias battery='echo acpitool -b'
alias bitchx='echo libera.chat'
alias cd-d2s_saves='cd "$HOME/.wine/drive_c/users/user/Saved Games/Diablo II"'
alias check-google='wget -O - https://www.google.com/'
alias check-network='bash -c "ip route; curl -IL http://nmcheck.gnome.org/check_network_status.txt"'
alias df='/usr/bin/df --human-readable --print-type 2>/dev/null'
alias dmesg='sudo /usr/bin/dmesg'
alias du2='du -h | sort -h'
alias DISPLAY="echo ':0.0'" #I keep forgetting the name of this variable in a tty/virtual-console
alias ffmpeg='/usr/bin/ffmpeg -hide_banner'
alias ffprobe='/usr/bin/ffprobe -hide_banner'
alias git-clone='/usr/bin/git clone --depth 1'
alias ifconfig='sudo /usr/sbin/ifconfig'
alias jpg='/usr/bin/jpegoptim -s'
alias libera.chat='echo bitchx'
alias lsblk='/usr/bin/lsblk --ascii --fs'
alias dm-start='is_desktop_running || sudo systemctl start display-manager.service'
alias click-start='is_desktop_running || sudo systemctl start display-manager.service'
alias mpv--mute-yes='mpv --mute=yes'
alias nm-logs='sudo journalctl --unit=NetworkManager.service'
alias png='/usr/bin/optipng'
alias rm2='/usr/bin/shred --remove=wipesync --verbose'
alias sudo-su-to-here='sudo -s'
alias sudo_su-to-here='sudo -s'
alias sudo-su-to-root-dir='sudo -i'
alias sudo_su-to-root-dir='sudo -i'
alias suspend='echo systemctl suspend'
alias the='/usr/bin/aiksaurus'
alias tree='/usr/bin/tree -A'
alias tty-silence-restore='sudo dmesg -n 8'
alias tty-silence='sudo dmesg -n 1'
alias vi='/usr/bin/vim'
alias weechat='/usr/local/bin/weechat'


swap-reset-for-dev-sda2-by-sbin-swapoff-sbin-swapon(){
  echo 'sudo swapoff -v /dev/sda2;  sleep 2;  sudo swapon -v /dev/sda2;  sleep 2'

  sudo swapoff -v /dev/sda2
  sleep 2
  sudo swapon -v /dev/sda2
  sleep 2
}
alias swapreset='swap-reset-for-dev-sda2-by-sbin-swapoff-sbin-swapon'

mpv--with-terminal-control-audio-only--startEQ00_00_00(){
  mpv --input-terminal=yes --no-video "$@"
}

bashhistoryAsSTDIN2history(){
  local tmp034
  cat > $tmp1/history001
  [ -f $tmp1/history001 ] || return 3
  echo "cat $tmp1/history001;echo;echo;sleep 5"
  cat $tmp1/history001
  echo;echo;
  sleep 5 


  echo 'cat $tmp1/history001 >> ~/.bash_history'
  cat $tmp1/history001 >> ~/.bash_history

  echo rm -fv $tmp1/history001
  rm -fv $tmp1/history001

  echo now type this into your interactive shell: history -n
}

swapcap_escp(){
  setxkbmap -option caps:swapescape
}
alias swapesc_capslock='swapcap_escp'

git-reset-repository-reset-its-history-all-commits-set-to-zero(){
  git checkout --orphan latest_branch
  sleep 2
  git add -A
  sleep 2
  git commit -am 'first-latest commit'
  sleep 2
  git branch -D main
  sleep 2
  git branch -m main
  sleep 2
  git push -f origin main
  sleep 2
  git push --set-upstream origin main
  echo 'sleep 2; echo done'
  sleep 2
}


pdf2png(){
  file_path="$1"
  [ -z "$file_path" ] && return 4
  [ -f "$file_path" ] || return 5
  [ "${file_path##*.}" = "pdf" ] || return 6
  [ -f /etc/ImageMagick-6/policy.xml ] && echo sudo mv -iv /etc/ImageMagick-6/policy.xml /root/etc_ImageMagick-6_policy.xml 
  echo convert "$file_path" page%04d.png 
}

pidof-return-0-if-process-is-running(){
  /usr/bin/pidof "$1" >/dev/null 2>&1
}

RANDOM_concept-name_STDOUT-only-one-line-one-word(){
  echo $(cat $words | grep -E '^[A-Z][a-z]+$' | shuf -n 1)$RANDOM
}

apt-search(){
  apt-cache search "$@"
}
conv(){
  echo conv feet=32 inches
  echo
  echo
 
  local arg1="$1" arg2="$2" 
  arg1="$( printf %s "$arg1" | sed 's/=/(/;s/$/)/')"

  echo /usr/bin/units "$arg1" "$arg2"
  /usr/bin/units "$arg1" "$arg2"
}


head-line-STDIN_arg1-is-line-number-to-print-to-STDOUT-from-STDIN(){
  head -$1 | tail -1
}
helpme(){
  echo 'guy: helpme? what the fuck does that mean?'
  sleep 0.6
  local topic idea_surely
  while :; do
    read -p 'guy: What is the topic? ' topic
    echo everyone: lol
    read -p "guy: What about $topic do you need help with? " idea_surely
    echo guy: you are a piece of shit. Why do I exist.
    sleep 1.4
    echo "guy: what the fuck is $idea_surely about $topic?"
    sleep 9
    echo '*guy leaves*'
    sleep 1.2
    echo '*the same guy re-enters*'
  done
}
dm-stop(){
  if is_desktop_running; then 
    echo sudo systemctl stop display-manager.service
    sudo systemctl stop display-manager.service
    echo sleep 2
    sleep 2
    systemctl status display-manager.service | grep -F Active:
  else
    echo exit 2
    return 2
  fi
}
alias click-stop='dm-stop'
myip(){
  local stdout_loc=/dev/null
  [ "$1" = '--log' ] && stdout_loc=~/Documents/myips.log
  [ "$stdout_loc" != '/dev/null' ] && { echo; date +%Y%m%d_%H%M%S; } | tee -a "$stdout_loc"
  wget --quiet -O - -4 ifconfig.io | perl -ne 'chomp;printf "%-017s", $_' | tee -a "$stdout_loc"
  wget --quiet -O - -6 ifconfig.io | tee -a "$stdout_loc"
}
backup-usb-number-label(){
  echo "get out USB labeled:    $(( $(date +%d | sed 's/^0//') % 3 ))"
}
halt(){
  cat <<'EOF_HALTTT'
#1) system=synced?
  git-push.sh
#2) @todo=() #?
  cd
  ls . Downloads $tmp1 $tmp2
#3) @fixme=() for t=$time->now() #?
  ls $TODOdir
#4) internet=off?
  wifi-off
#5) gui=off?
  dm-stop
#6) browser=fresh?
  epi_cache-reset
#7) weechat=fresh?
  cd ~/Documents/weechat-archives/ && bash import.sh
#8) backup=latest?
  lsblk                                   #see if your drive is plugged in
  cd ~/Documents; udisks-mount /dev/sdb1  #ie. udisks-ctl mount --block-device /dev/sdb1
  clear;bash backup-to-MYFAT34.sh                       
  eject                                   #ie.  `udisksctl unmount --block-device /dev/sdb1 && { sleep 3; udisksctl power-off --block-device /dev/sdb; }`
#111) paging=reset?
  swapreset                               #ie. `sudo swapoff -v /dev/sda2; sleep 2; sudo swapon -v /dev/sda2`
#222) power=2%?
  `suspend`
#9999) hdd=gone?
  unmount /dev/sda1     #ie. [basically:] udisksctl unmount --block-device /dev/sda1
#999999) electricity=off?
  sudo /sbin/halt
EOF_HALTTT
}
watch-dr-strange(){
  [ -v DISPLAY ] || return 99
  cd ~/Documents/TODO/VIDEO_TS || return 100
  mpv "--start=$(printf '%02d:%02d:00' "$((RANDOM % 2))" "$((RANDOM % 6 * 10))")" ./  #--mute=yes    means --mute-audio-yes=on
}
watch-tv-show(){
  [ -v DISPLAY ] || return 101
  cd ~/Documents/TODO/FULLHOUSE/VIDEO_TS || return 102
  mpv "--start=$(printf '%02d:%02d:00' "$((RANDOM % 3))" "$((RANDOM % 6 * 10))")" ./   #--mute=yes    means --mute-audio-yes=on
}
acronym-random-generate-output-stdout(){
  perl -MList::Util=shuffle -e '$\="\n";@a=("A".."Z");@a=@a;@a=shuffle(@a);$out=pop @a;$out.=pop @a;$out.=pop @a;if(rand() < 0.41){$out.=pop @a;}print $out;'
}
coffee(){
  echo you: sips some coffee..
  echo mm yum
}
pictures-view(){
  echo xdg-open '$pictures'
}
status(){
  echo "I bet I'm making some progress! 15+ years in-the-making. Let's see:"
  perl -MList::Util=shuffle -e 'print join("",shuffle("a" .. "z"))'
}
gcc-run(){ 
  [ -z "$1" ] && return 22;
  [ -f "$1" ] || return 23;
  file "$1" | grep -qF 'C source' || return 24;
  [ ! -d ~/.temp/ ] && {
    echo mkdir '~/.temp/'
    mkdir ~/.temp/
  }
  
  echo '/usr/bin/gcc -ggdb3 -Og -Wall -Wextra -Wpedantic -o ~/.temp/0001 "$1" && ~/.temp/0001; shred -uv ~/.temp/0001 >/dev/null 2>&1; rmdir ~/.temp/'
  /usr/bin/gcc -ggdb3 -Og -Wall -Wextra -Wpedantic -o ~/.temp/0001 "$1" && ~/.temp/0001
  shred -uv ~/.temp/0001 >/dev/null 2>&1
  rmdir ~/.temp/
}
c(){
  [ -z "$1" ] && return 99
  [ -a "$1" ] && return 100     #-a tests for ANY_FILE_WHATEVER (ie. directory/regular-file/link)
  [[ "$1" =~ \.c$ ]] || return 101
  cat <<'EOFMYC' > "$1"

#include <stdio.h>

int main(int _argc, char *_argv[]){
  puts("Hello, World!");
  return 0;
}

EOFMYC
  [ -f "$1" ] || return 102
  $EDITOR "$1"
}

py(){
  [ -z "$1" ] && return 99
  [ -a "$1" ] && return 100     #-a tests for ANY_FILE_WHATEVER (ie. directory/regular-file/link)
  [[ "$1" =~ \.py$ ]] || return 101
  cat <<'EOFRR2' > "$1"
#!/usr/bin/python3

def p(_str=None):   #ie. to print object with 0 newline
  if _str:
    print(_str, end='')

if __name__ == '__main__':
  from sys import argv
  del argv[0]
  if len(sys.argv) > 0:
    ar_input = argv[0:]
  else:
    ar_input = sys.stdin.read().split(' ')

  print(ar_input)


EOFRR2
  [ -f "$1" ] || return 102
  chmod +x "$1"
  $EDITOR "$1"
}
cpu-temp(){
  echo CPU temperature is `tempconv $(sensors | grep -E ^CPU | grep -Eo [0-9]+\.[0-9]+)`
}

example-rsync(){
  echo rsync --recursive --verbose exists-as-dir/ 0-exists-as-dir/
  echo 'rsync --recursive --verbose ~/Downloads/project_falcon/exists-as-dir/ ~/Documents/Backup_this-dir-0-exists'
}
example-top(){
  cat <<'EOF_TOP'
sudo -i #ie. cd to /root/ && sudo su
iotop
jnettop
top
EOF_TOP
}
alias top-examples='example-top'
example-utf8-code-to-all-info(){
  cat <<'EOF_UTF8'
lynx -force_html <(wget -O - "$url_utf8_codes+$1")
wget -O - "$url_utf8_codes+$1" | grep -Eo '&amp;[^;]+;' | sort | uniq | sed 's/&amp;/\&/'
EOF_UTF8
}
alias utf8-examples-code-to-all-info='example-utf8-code-to-all-info'
example-ps(){
  cat <<'EOFFPSSS'
sudo ps -q 1 aux
sudo kill -15 1 || sudo kill -2 1 || sudo kill -1 1 || sudo kill -9 1
DISPLAY=:0.0 xfce4-taskmanager
EOFFPSSS
}
example-urban(){
  cat <<EOFFFFFUUUUU
wget -O - \$url_urbandicationary=mouter | jq -C | less -R
wget -O - \$url_urbandictionary=boomer | jq --monochrome-output '.list[]["definition","example"]'
EOFFFFFUUUUU
}
alias urban-example='example-urban'
example-wiki(){
  echo 'links2 $url_wiktionary/stu'
  echo 'links2 $url_wikipedia=thunderbolt+usb'
}
alias wiki-example='example-wiki'
example-find(){
  printf '%s\n' "find -type f \! -path '*/.git/*'"
  printf '%s\n' "touch ~/now-empty; sleep 15; find ~/ -newer ~/now-empty"
}
example-epi(){
  cat <<'EOF_EPIPH_EXAMPLE'
DISPLAY=:0.0 bro https://amazon.com https://gist.github.com https://teeworlds.com/forum; epi_cache-reset
DISPLAY=:0.0 bro https://facebook.com; epi_cache-reset
DISPLAY=:0.0 bro https://github.com/megatron-lucy/ https://github.com/user95f85f/; epi_cache-reset
DISPLAY=:0.0 bro https://twitter.com; epi_cache-reset
etc-hosts-reset.sh; DISPLAY=:0.0 bro https://youtube.com/results; etc-hosts-push.sh; epi_cache-reset
EOF_EPIPH_EXAMPLE
}
alias epi-example='example-epi'
bashrc-alias-list-function-list-print(){
  if [ "$1" = '-2' ]; then
    local out=$(alias -p)
    out+="\n$(compgen -A function | egrep -v ^_)"
    while read line1; do printf '%80s' "$line1       "; read line2; printf '%s\n' "$line2"; done <<<"$out"
    return 0
  fi

  alias -p; compgen -A function | egrep -v ^_
}
up(){
  local levels="$1"
  [ -z "$levels" ] && levels=2
  [[ "$levels" =~ ^[0-9]$ ]] || return 4
  while [ "$levels" -gt 0 ]; do
    (( levels-- ))
    cd ..
  done
}
stdin-count-percentage(){
  perl -ne 'BEGIN{$total=0;}while(/([0-9]+\.?[0-9]*%)/g){$num=$1;$num=~s/%//;$total+=$num;}END{print $total;}'
}
cd2(){
  [ $# -eq 1 ] || return 4
  if [ -z "$1" ]; then
    cd
  elif [ -d "$1" ]; then
    cd "$1"
  else
    mkdir -pv "$1" && cd "$1"
  fi
}
is_desktop_running(){
  w | grep -Fq xfce4-session && return 0
  return 1
}
eject(){
  if [ -d /media/user/MYFAT34 ]; then
    echo udisksctl unmount --block-device /dev/sdb1
    udisksctl unmount --block-device /dev/sdb1
    echo sleep 2
    sleep 2
    echo udisksctl power-off --block-device /dev/sdb
    udisksctl power-off --block-device /dev/sdb
  else
    /usr/bin/eject
  fi
}
Z(){
  cd ~/Documents && unzip Z.zip && shred -uv Z.zip && /usr/bin/vim -n Z && zip --encrypt Z.zip Z && shred -uv Z
}
dice(){ ack "https?://.*$*" $weechat_logs | tail -1 | perl -ne 'BEGIN{undef $/;}if(m#(https?://[a-zA-Z0-9,%\#=/.:?_+&\-]+)#){print $1;}'; }


example-tar-compression(){
  cat <<'EOF_CREATION'
gzip 1                                 #replaces 1 with 1.gz
bzip2 1                                #replaces 1 with 1.bz2
tar -cvvzf 0-exists.tar.gz 1 2 3 4     #.tar.gz
tar -cvvjf 0-exists.tar.bz2 1 2 3 4    #.tar.bz2
zip -r 0-exists.zip 1 2 3 4            #.zip
tar -cvvf  0-exists.tar 1 2 3 4        #.tar
tar -cvvJf 0-exists.tar.xz 1 2 3 4     #.tar.xz
EOF_CREATION
}
example-tar-extraction(){
  cat <<'EOF_EXTRACTION'
gunzip 1.gz                  #replaces 1.gz with 1
bunzip2 1.bz2                #replaces 1.bz2 with 1
tar -xvvzf exists.tar.gz     #@all to ./
tar -xvvjf exists.tar.bz2    #@all to ./
unzip exists.zip             #@all to ./   XXX: 20% yes
tar -xvvf  exists.tar        #@all to ./
tar -xvvJf exists.tar.xz     #@all to ./
EOF_EXTRACTION
}
vol-is-good(){
  local VOLUME_THRESHOLD_FOR_MUSIC_ON_HEADPHONES=26 VOLUME_THRESHOLD_FOR_MUSIC_ON_SPEAKERS=63
  local current_volume=$(vol-get-current-float --percent-integer)

  [ -z "$current_volume" ] && return 3
  [[ "$current_volume" =~ [0-9]{1,3} ]] || return 4

  local good_threshold=$VOLUME_THRESHOLD_FOR_MUSIC_ON_HEADPHONES
  pactl list | grep -qF 'Active Port: analog-output-speaker' && good_threshold=$VOLUME_THRESHOLD_FOR_MUSIC_ON_SPEAKERS
  [ "$current_volume" -gt "$good_threshold" ] && {
    printf 'PANIC: Current alsa/pulseaudio volume settings (ie. %d) are 0.2%% good.\nVolume threshold of %d is too high for music/mp3s/ogg/whatever\n' "$current_volume" "$good_threshold"
    echo '`vol-low-set`'
    local myv
    read -n 1 -p '? (Y/n) ' myv
    echo

    case "$myv" in
      [Yy]|'') vol-low-set; return 0;;
    esac
    return 200
  }
  return 0
}
vol-get-current-float(){
  local volume_float=$(amixer get Master | perl -ne 'BEGIN{undef $/;} /Limits: Playback 0 - ([0-9]+).*Front Right: Playback ([0-9]+)/s && printf "%0.12f", $2 / $1;')
  [ -z "$volume_float" ] && return 120
  [ "$1" = '--percent-integer' ] && { printf '%0.0f' $(printf '%s * 100\n' "$volume_float" | bc); return 0; }
  echo "$volume_float"
  return 0
}
vol-low-set(){
  echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 20%
  pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 20%
  return 0
}
vol-up(){
  echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
  pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
  while :; do
    read -p 'more? '
    echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
    pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
  done
  return 0
}
vol-down(){
  echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
  pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
  while :; do
    read -p 'more? '
    echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
    pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
  done
  return 0
}
watch-home(){
  cd
  touch hello
  while :; do
    echo sleep 10
    sleep 10
    clear
    echo find -newer hello
    find -newer hello
  done
}
watch-logs-global-journalctl(){
  sudo journalctl -n30 --follow
}
ffplay(){
  [ -z "$1" ] && return 1
  [ -f "$1" ] || return 2
  local filename="$1"
  local file_extension="${filename##*.}"
  if [[ $file_extension = 'mp3' || $file_extension = 'wav' || $file_extension = 'wv' || $file_extension = 'ogg' || $file_extension = 'm4a' ]]; then
    vol-is-good || return 44
    /usr/bin/ffplay -nodisp -autoexit -hide_banner -v 40 "$filename"  #the -v 40 is a good verbosity I think
  else
    [ -v DISPLAY ] || return 55
    /usr/bin/ffplay -hide_banner -v 40 "$filename"
  fi
}
alias ffplayer=ffplay
mp3-review(){
  [[ "$(find -maxdepth 1 -type f -name '* *' | wc -l)" -ne 0 ]] && return 3 #any spaces in files? just exit. f*** it.
  for i in $(echo *.mp3 | tr ' ' '\n' | shuf | tr '\n' ' '); do vol-is-good || return 44; ffplay $i; read -n 1 -p 'delete? (y/N) ' yn; [[ $yn = 'y' ]] && { echo; rm -v $i; echo; } ;  done
  return 0
}
alert-me(){
  [ -z "$1" ] && return 3
  [ "$1" = '--gui' ] && {
    shift
    DISPLAY=:0.0 xterm -T sup -e sh -c "echo '$*'; sleep 999"
    return 4
  }
  wall "$*"
  is_desktop_running && {
    DISPLAY=:0.0 zenity --title="$*" --info --text="$*" --no-wrap
  }
}
wifi-on(){
  for i in $(nmcli connection show --active | grep wifi | egrep -o '\b[a-f0-9]+-[a-f0-9]+-[^ ]+\b'); do nmcli connection down uuid $i; done
  nmcli radio wifi on
}
wifi-off(){
  for i in $(nmcli connection show --active | grep wifi | egrep -o '\b[a-f0-9]+-[a-f0-9]+-[^ ]+\b'); do nmcli connection down uuid $i; done
  nmcli radio wifi off
}
wifi-scan(){
  nmcli device wifi
}
wifi-connect(){
  [ -z "$1" ] && { echo 'wifi-connect $SSID'; return 6; }
  nmcli --wait 20 --ask device wifi connect "$*"
}
echo-bold(){
  local newline='\n'
  [ "$1" = '--printf' ] && { newline=''; shift; }
  tput smso; printf '%s' "$*"; tput rmso; printf "$newline"
}
date-exact-STDOUT-only-one-line-only-as-floating-number(){
  local arg1="$*"
  [ -z "$arg1" ] && arg1='now'
  echo `date --utc -d "$arg1" +%s` / 60 / 60 / 24 / 365.242 + 1970 | bc -l
}
date-convert-exact-from-STDIN-to-UTC-timestamp-uint64-as-STDOUT-one-line(){
  local exact whole decimal
  exact="$(cat)"
  whole="${exact%.*}"
  decimal="0.${exact#*.}"

  echo "($whole - 1970  + $decimal) * 365.242 * 24 * 60 * 60" | bc -l | awk -F. '{printf "%s", $1}'
}
echo-color-through-STDIN(){
  toilet --font term --gay
}
date-toilet(){
  echo-bold --printf 'the time is:'
  printf '  '
  date-exact-STDOUT-only-one-line-only-as-floating-number

  echo
  am_pm=$(date '+%p');am_pm=${am_pm,,}; echo -n $(date '+%b %d %I:%M:%S') $am_pm
  printf '   '
  echo-bold '# within the dark chapels, aka speakers of English, aka $thisPlaceOfCourseSurely0PercentChance'

  echo;echo;
  printf 'tomorrow: '
  date --date=tomorrow '+%a %d %b %Y 12:00:00 AM %:z'
  printf 'tomorrow: '
  date --date=tomorrow --utc '+%a %d %b %Y 12:00:00 AM %Z'
}
alias toilet-date='date-toilet'
alias toiet-date='date-toilet'
waitpid-or-process-commandname(){
  local arg1="$*" #As slurped
  local pid=1
  if [[ $arg1 =~ ^[0-9]+$ ]]; then
    pid=$arg1
  elif [ -n "$arg1" ] ; then
    pid="$(pidwait "$arg1" | tr '\n' ',' | sed 's/,$//')"
    [ -z "$pid" ] && { 
      printf '`%s` 0 process IDs\n' "pidwait $arg1"
      return 42
    }
    [[ $pid =~ ^[0-9]+$ ]] || {
      printf '%s "%s"\n' 'warning: more than one PID found for process/commands[?]' "$arg1"
    }
  else
    echo 'warning: defaulting to PID 1 (ie. init process) (AHAHAHAAAAAAAAAAAAAA)'
  fi

  local date_started="$(date +%s)"  #ie. "date_now" [?]
  local sleep_for=12 date_now=$date_started
  while [ ! -z "$(ps -q "$pid" -o pid= -o comm=)" ]; do
    sleep_for=$(( RANDOM % 12 + 1 )) 
    date_now="$(date +%s)"
    printf 'sleep %02s %s\n' "$sleep_for" "#you have waited $(( $date_now - $date_started )) seconds"
    sleep "$sleep_for"
  done

  return 0
}
#FIXME: deleteme now
function zzzzzzzz(){ [[ $1 == 'clickidy-click?' ]] && \
xfconf-query -c pointers -p /DELL07DE00_06CB75C5_Touchpad/Properties/libinput_Tapping_Enabled --create --type int --set 1; }

wifi-troubleshoot(){
  cat <<'EOF_NETCMDS' | tee ~/net-destroy.txt
sudo iw dev wlp1s0 disconnect
echo sleep 2.0; sleep 2.0
nmcli radio wifi off
echo sleep 1.8; sleep 1.8
sudo systemctl stop ModemManager.service NetworkManager.service wpa_supplicant.service 
echo sleep 1.6; sleep 1.6
sudo rm -vi /etc/NetworkManager/system-connections/*
echo sleep 1.4; sleep 1.4
sudo systemctl start NetworkManager.service wpa_supplicant.service 
echo sleep 1.2; sleep 1.2
nmcli radio wifi on
echo I just disconnected your wifi connection, deleted NetworkManager configuration, restarted wpa_supplicant and NetworkManager systemd services


EOF_NETCMDS

  printf '%s\n' "cd;echo . net-destroy.txt;. net-destroy.txt;echo grep -vF sleep net-destroy.txt;grep -vF sleep net-destroy.txt;rm -vi net-destroy.txt"
  read -r -n 1 -p '? (Y/n) ' myv    # XXX: the '-r' switch is an assumption not an option
  echo

  case "$myv" in
    [Yy]|'') echo k;;
    [Nn]*)   echo return 0; return 0;;
  esac

  cd;echo . net-destroy.txt;. net-destroy.txt;echo grep -vF sleep net-destroy.txt;grep -vF sleep net-destroy.txt;rm -vi net-destroy.txt
}
#XXX: January 1, 2022 == January 1, 2022 00:00:00 PDT
date-diff-2arg-datestrings-show-how-many-28-days-later-as-float(){
  local arg1="$1"
  local arg2="$2"
  [ -z "$arg1" ] && return 22
  [ -z "$arg2" ] && return 32
  local timestamp1="$(date +%s --date="$arg1")" || return 34
  local timestamp2="$(date +%s --date="$arg2")" || return 39
  perl -e 'printf "%.4f", abs($ARGV[0]) / 60 / 60 / 24 / 28;' -- "$(( timestamp1 - timestamp2 ))"
}

doneisdone(){
  mpv --really-quiet ~/Documents/ff7_fanfare.ogg &
  toilet --gay --termwidth ${*-doneisdone}  #ie. the default message if 0 arguments is "whats done is done"
                                            #ie. modifies the $* variable, which is the join(' ') string of all [function] arguments.
}

wife-says-what(){
  echo 'wife: hey honey, what are you doing?'
  local myv wife_responses
  read -r -p '? (virtually uuuuuuuuuuuuuuuuuuuuuuhm) ' myv    # XXX: the '-r' switch is an assumption not an option

  [ -z "$myv" ] && myv='virtually uuuuuuuuuuuuuuuuuuuuuuhm'

  echo "You are currently $myv"
  sleep 3.18
  wife_responses=(
    'can you please........GET OUT'
    'FUCK OFF!!!!!!!!!!!!!!!!!!'
    'get a job'
    'Get away from me'
    'get something out of yourself and do something with it like something other than what you are doing right now, please'
    'go away'
    'i love you..sort of'
    'I need a man'
    'leave me alone'
    'stfu and die'
    'time to get lost'
    'why are you here'
  )
  local chosen="$(php -r 'echo rand(0,11);')"
  echo "wife:     ${wife_responses[$chosen]}"
  sleep 10
  echo 'you:    Ok Ok *leaves house and goes on a 10 hour mountain-biking-hiking journey*'
}

cat-felix-says(){
  echo 'What do you say to your cat Felix'
  local myv
  read -r -p '? (you are such a good kitty) ' myv    # XXX: the '-r' switch is an assumption not an option
  [ -z "$myv" ] && myv='you are such a good kitty'
  echo "You say to Felix: \"$myv\""
  unset myv
  sleep $( printf '%.1f' "$( echo $(( RANDOM % 16 + 13 )) / 10 | bc -l )" )
  mpv --really-quiet ~/Documents/meow$(( RANDOM % 3 )).ogg &
  toilet --gay --termwidth '*meow*'
}


be-productive(){  #ie. download a random python3 library [debian package] and hack on it
  [ -d ~/Downloads/python3-productive ] && return 11
  mkdir -p ~/Downloads/python3-productive || return 12
  cd ~/Downloads/python3-productive || return 13
  apt download $(apt-cache search python3 | grep -E '^python3-' | awk '{print $1}' | shuf -n 1) || return 14
  dpkg-deb --raw-extract *.deb whatever || return 15
  rm -v *.deb
  mv whatever/* ./
  rm -frv whatever
  find -type f -printf '%P\n'
  echo 'Have fun [hacking [on this python3 [[ie. debian-packaged] library]]].'
}

man-what-a-man-could-do(){
  echo what a man could do:
  sleep 9
  echo '"this" and that surely'
  sleep 9
  local progression_level=0
  while :; do
    (( progression_level++ ))

    printf 'man: '
    case "$progression_level" in
      1) echo '"thiiiis" and thhhhat';;
      2) echo '"THIS" and thhhhhayt';;
      3) echo '"Thaysz" und DAT';;
      4) echo '"THAYZIS" AND DATA';;
      5) echo '"DAYYYYYYYYYYYYRT" AND DATAAAAAAT';;
      6) echo '"DYAYERJLJSDLKFJOIJWOEIRJOI" AND UDJRIWUERIOUQ';;
      7) echo '"ERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDTADRT" DAT DER';;
      8) echo '"THIS" AND THAT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!';;
      9) echo '"this" and dthat';;
      10) echo '"this" and that';;
      11) echo '"this" and that *huge knarly face*';;
      12) echo '*dark voice* "this"...and *high voice* that';;
      13) echo '*0 volume:* "this" and *2000% volume:* THAT';;
      14) echo '*dark slur:* "thiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiis" AAaaaaandrerrnnnnd dat';;
      15) echo '"this" ends that';;
      *) break;;
    esac
    sleep 4
  done

  printf 'TODO: needs more (ie. above progression level %d+ is undefined)\n' "$progression_level"
}

true-is-it-true-that(){
  local num=0 tally=0
  local arPossible=({a..z})
  local totalPossible="${#arPossible[@]}"

  echo "is $* true?"
  sleep 4.1
  printf 'thinking: '
  local wait_until_this_timestamp_or_greater=$(( $(date +%s) + 20 ))

  while :; do
    num=$(( RANDOM % totalPossible ))
    tally=0
    for i in "${arPossible[@]}"; do
      [ $tally -eq $num ] && { echo -n "$i"; break; }
      (( tally++ ))
    done
    sleep 0.2
    [ "$(date +%s)" -ge $wait_until_this_timestamp_or_greater ] && break
  done

  echo
  echo '0% yes.'
}

girlfriend-get-girlfriend(){
  local myname
  read -r -p "What is your name? ($USER) " myname
  [ -z "$myname" ] && myname="$USER"

  sleep 3.2
  echo "girlfriend: hi $myname."
  unset myname
  sleep 3.2
  echo "girlfriend: I love men."
  sleep 3.2
  echo "girlfriend: I love you."
  sleep 3.2
  echo "girlfriend: Let's get drunk."
  sleep 3.2
  echo "girlfriend: Tell me all about you."
  sleep 3.2
  echo "girlfriend: What's your favorite beer."
  sleep 3.2
  echo "girlfriend: We should get married."
  sleep 3.2
  echo "girlfriend: Are you a family man."
  sleep 3.2
  echo 'girlfriend: Did your last girlfriend give b*** like me.'
  sleep 6.2
 
  wife-says-what 
}

best-friend-talk-to-him(){
  local say_to_best_friend
  printf 'What do you say to your best friend'
  read -p '? (sup bro.) ' say_to_best_friend
  [ -z "$say_to_best_friend" ] && say_to_best_friend='sup bro.'

  echo '*your best friend enters [ie. comes in]*'
  sleep 2.1
  echo "you: $say_to_best_friend"
  sleep 2.8
  echo 'best friend: Do "$this" and $that. "$this2" and $that2. "$this3" and $that3.'
  sleep 3.1
  echo 'best friend: 15-26 minutes a day. With me watching you. For 7 days.'
  sleep 5
  echo 'best friend: You will be 330%-760% better than me.'
  sleep 10
  echo "best friend: We'll start in 10 minutes. Later [bye]."
  sleep 2.3
  echo '*your best friend leaves/exits*'

  echo 'sleep 9.5m; wife-says-what'
  sleep 9.5m
  wife-says-what
}


cruel(){
  local url="$*" useragent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0"
  [ -z "$url" ] && return 2
  [[ "$url" =~ ^http ]] || url="https://$url"
  printf '\n\n\n\n\n' >> ~/cruel.log
  wget -e 'robots=off' --no-check-certificate --user-agent="$useragent" -O - "$url" 2>> ~/cruel.log | vim -
  return 0
}
on(){
  [ -f ~/on-first-boot-SETUP-log.log ] || return 2
  clear; head -40 ~/on-first-boot-SETUP-log.log
}
#cd into the directory that was modified the latest [latest created?] Great for a TODO folder with new folders in it to go into the latest TODO [directory?]
cd-latest(){ local found='dne0238'; for d in */; do [[ "$d" -nt "$found" ]] && found="$d"; done; cd "$found"; return 0; }

vim-latest(){ local found='dne0238'; for f in *; do [ -d "$f" ] && continue; [[ "$f" -nt "$found" ]] && found="$f"; done; [ -f "$found" ] && vim "$found"; return 0; }

unmount(){
  local dev="$1"
  [ $# -ne 1 ] && return 4
  [[ "$dev" =~ ^[/a-z0-9]+$ ]] || return 5
  echo findmnt "$dev"
  findmnt "$dev" || return 6
  echo udisksctl unmount --block-device "$dev" 
  udisksctl unmount --block-device "$dev" 
}

udisks-mount(){
  local dev="$1"
  [ $# -ne 1 ] && return 4
  [[ "$dev" =~ ^[/a-z0-9]+$ ]] || return 5
  echo findmnt "$dev"
  findmnt "$dev" && return 6
  echo udisksctl mount --block-device "$dev" 
  udisksctl mount --block-device "$dev" 
}
for-everyone(){
  echo cd ~/Documents
  cd ~/Documents || return 3
  echo 'find -type f -printf %P\n | sort | grep -Ev ^(lorem-ipsum/|TODO/|src-|doc-) > ~/Downloads/for-everyone.log'
  find -type f -printf '%P\n' | sort | grep -Ev '^(lorem-ipsum/|TODO/|src-|doc-)' > ~/Downloads/for-everyone.log
}



html(){
  [ -z "$1" ] && return 99
  [ -a "$1" ] && return 100     #-a tests for ANY_FILE_WHATEVER (ie. directory/regular-file/link)
  [[ "$1" =~ \.html$ ]] || return 101
  cat <<'EOFHTMLOUT' > "$1"
<!doctype html>
<html lang="en-US">
<head>
  <title>about:something</title>

  <meta charset="utf-8">
  <meta http-equiv="Content-type" content="text/html; charset=utf-8">
  <meta name="keywords" content="">
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!--
    <link rel="icon" type="image/png" href="example_favicon_ico_32x32_8bitRGBA_0interlaced_location_PNG_datafile_location.png">
  -->
  <style type="text/css">
  body {
    background-color: #f0f0f2;
    font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
    margin: 0;
    padding: 0;
  }
  body > div {
    background-color: #fdfdff;
    border-radius: 0.5em;
    box-shadow: 2px 2px 3px 4px rgba(0,0,0,0.30);
    margin: 5em auto;
    padding: 2em;
    width: 600px;
  }
  a:link, a:visited {
    color: #38488f;
    text-decoration: none;
  }
  @media (max-width: 700px) {
    div {
      margin: 0 auto;
      width: auto;
    }
  }
  </style>  
  <script> 
var d = document;
function go(_o){
  return d.getElementById(_o);
}

function body_loaded(){
  //console.log('This page loaded.');
  //setTimeout("sleep_catch()", _seconds * 1000);
}
  </script> 
</head>

<body onload="body_loaded()"><div>
<div id="mydiv" style="white-space:pre-line">

</div>
</div></body>
</html>
EOFHTMLOUT
  [ -f "$1" ] || return 102
  $EDITOR "$1"
}


d2-revive-Safe(){
  echo 'cd /usr/local/share/diablo-2-tools/;rm /var/cache/diablo-2-tools/revert.d2s; perl change.pl @36make00100100'
}
