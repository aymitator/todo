

exit 0


PRINTF CAN PRINT OUT UTF-8 UNICODE AS HEX

  printf '\xC3\xB5\n' #o tilde for espanol spanish

ZERO FILE OF ANY LENGTH IN BYTES

dd if=/dev/zero of=0x00_00_00_00-every-run-of-this-command.dat count=4 iflag=count_bytes   #file 0x00_00_00_00.dat   #output: 0x00_00_00_00.dat: data

UTF-8 UTF8 DIRECTION OF TEXT RIGHT TO LEFT LEFT TO RIGHT U+2069 U+2067

USING GNU ``find'' WITHOUT [IGNORE] THE .git DIRECTORIES



  FIND_OPTIONS_TO_IGNORE='! -path */.git/*'
  find $FIND_OPTIONS_TO_IGNORE




  #<FOR_EXAMPLE>
  cd $git #ie. a directory where all of my live git repositories are
  find -type f \! -path '*/.git/*'
  #or
  find -type f '!' -path '*/.git/*'
  #</FOR_EXAMPLE>



TODO: ALL FILETYPES FOR ``bash'' ``find'' ``perl'' ``php'' ``python3''
  XXX: file tests ie. types ie.eg. symlink directory executable_file any_file

EXTRACT .deb FILE?

  dpkg-deb --raw-extract gimp-gap_2.6.0+dfsg-5+b2_amd64.deb an-empty-or-0-existent-dir

FINDING A SUBSTRING IN MANUALS IS PRETTY-FUCKING_BULLSHIT

  info -a $cmd | grep $F_or_E -A 0 -- $your_query

  #FOR EXAMPLE:
  #for finding about find's -type command-option
  info -a find | grep -F -A 17 -- -type\ c

  #XXX: this is fucking shit.

A MAN PAGE VERSUS AN INFO-SET-OF-[?]-MAN[UAL]-PAGES

  bash's man has 179% more lines than all of find's info man[ual] pages combined.

ULTIMATE SINGLE-CHARACTER INPUT HANDLING

  printf '%s\n' "rmdir -v ~/"
  read -r -n 1 -p '? (Y/n) ' myv    # XXX: the '-r' switch is an assumption not an option
  [ "$myv" != 'Y' -a "$myv" != 'y' -a "$myv" != '' ] && {
    echo exit 0
    exit 0
  }
  unset myv
  rmdir -v ~/

GNU/LINUX BASH:  case esac example:

  myv=''
  case "$myv" in
    [Yy]|'') echo k;;
    [Nn]*)   echo exit 0; exit 0;;
  esac

GNU/LINUX BASH: WAITPID WAIT FOR COMMAND TO EXIT
  
  ps aux #find the PID number
  out=zzzzzzz
  while [ -n "$out" ]; do
    out="$(ps -q $pid_number -o pid= -o comm=)"
    sleep 5
  done
  echo your process has exited.

THE CORRECT GNU/LINUX KILL SIGNALS TO KILL A PROCESS: -15 THEN -2 THEN -1 THEN -9

  #for example:       XXX what the f do these number signals stand for?
  kill -15 $pid_to_kill
  read -p 'Dead yet? (press CTRL+C if it did)'
  kill -2 $pid_to_kill
  read -p 'Dead yet? (press CTRL+C if it did)'
  kill -1 $pid_to_kill
  read -p 'Dead yet? (press CTRL+C if it did)'
  kill -9 $pid_to_kill      #SIG_KILL   SIG-KILL   -KILL    right?
  echo dead now.

BASH ONE-LINER PRO FOR DEBIAN PACKAGE MANAGEMENT: apt-show-recommended-from-manually-installed-packages.sh

  for i in `apt-mark showmanual`; do rec="$(dpkg-query -f '${Recommends}' -W $i)"; [ -n "$rec" ] && echo "$i: $rec"; done

BASH ONE-LINER PRO FOR DEBIAN PACKAGE MANAGEMENT: apt-show-BIN-files-from-manually-installed-packages

  for str_package_name in $(apt-mark showmanual); do str_package_filelist_bin="$(dpkg --listfiles "$str_package_name" 2>/dev/null | egrep bin/ | sed 's/^/  /')"; [[ "$str_package_filelist_bin" ]] && { echo "<$str_package_name>"; echo "$str_package_filelist_bin" | sed 's/\/\([a-zA-Z0-9._-]\+\)$/\/\x1b[34m\1\x1b[39m/'; echo "</$str_package_name>"; } ; done

IN KUBUNTU 14.04 HERE IS A GOOOOOOOOOOOD TTY/VIRTUAL-CONSOLE FONT
  (13% CHANCE IT WAS ACTUALLY LINUX MINT 17.3)

  setfont Uni2-VGA32x16


  setfont ter-v32n   #(in NixOS)

BEST WAY TO OPEN `gparted` ON YOUR GNU/LINUX PC/COMPUTER/LAPTOP/WUT-THE-WU

  sudo gparted /dev/sdb #for me when I plug-in a USB (HDD) drive
  sudo gparted /dev/sda #for me when I want to do stuff to the "integrated" HDD/SSD

INITIALIZE GIT ON YOUR SYSTEM OPTION 1/2

  #this information is pretty much just like "pasted" into ~/.gitconfig    :/
  git config --global credential.username 'user95f85f'    #XXX username = login name = login username == github name == github username == github login username == github.com url username
  git config --global user.name 'user95f85f_cli'          #XXX user.name + user.email refer to github.com preferences to match your email with a string that represents what you want your `git pushes` to be be from [ie. a who to be called from a git push [versus the HTML5 interface on the https://github.com website [[HTTP session] interface]]]. 'user.' == github-git-upload-preferences-I-guess.'
  git config --global core.askPass '/path/to/executable/that/echos/the/password/hehe.sh' 
  git config --global user.email 'user9de1d@gmail.com' #--required on the github for contributions to show up on your main page to show your activity on github

INITIALIZE GIT ON YOUR SYSTEM OPTION 2/2 (PUT THIS INTO A [TEMPORARY] BASH SCRIPT AND EXECUTE IT)

  #your global git config settings:
  #your name is your requested name to be called while uploading your pushes to the online-git repository-system
  #your name, password, and username are required (email is not) for pushing to work
  GITHUB_USERNAME=user95f85f
  GITHUB_REGISTERED_EMAIL_FOR_CONTRIBUTION_ON_GITHUB_TRACKING='user9de1d@gmail.com'
  CHMOD_X_STDOUT_YOUR_TOKEN=/path/to/executable/that/stdout/echos/prints/printfs/the/password/hehehehehAHAHAHAAAHEHEHEHEHEeeeeeeeNO_NEWLINES_IN_STDOUT.sh 
  #note the beginning/leading tab for the leading space(s) in the .gitconfig file
  cat <<EOFGIT >~/.gitconfig
[user]
	name = ${GITHUB_USERNAME}_cli
	email = ${GITHUB_REGISTERED_EMAIL_FOR_CONTRIBUTION_ON_GITHUB_TRACKING}
[core]
	askPass = ${CHMOD_X_STDOUT_YOUR_TOKEN}
[credential]
	username = ${GITHUB_USERNAME}
EOFGIT


GITHUB / GIT CLEAR DELETE REMOVE PURGE ALL FILE [INCLUDING THE ONES THAT 0% EXIST] COMMIT HISTORY ::: RESET REPOSITORY OF MASTER / MAIN BRANCH
  
  #assuming you are in your [cloned] repo [directory] whatever:
  git checkout --orphan latest_branch; git add -A; git commit -am 'first-latest commit'; git branch -D main; git branch -m main; git push -f origin main; git push --set-upstream origin main

  #for example:
  cd $git/best-diablo2-saved-characters && { git checkout --orphan latest_branch; git add -A; git commit -am 'first-latest commit'; git branch -D main; git branch -m main; git push -f origin main; git push --set-upstream origin main; } && echo cleared


GITHUB SH

  #file total fetched filesize [ie. into directory './linux'] is now -89% (more) than without --depth 1
  git clone --depth 1 https://github.com/torvalds/linux 

  git clone https://github.com/user95f85f/fresh-debian2
  git clone https://github.com/user95f85f/fresh-windows
  git clone https://github.com/user95f85f/fresh-debian
  git status
  git add bash.1.txt _bashrc.txt
  git rm python-cheat-cheet.txt 
  git commit
  git-token-xclip-cp 
  git push
  #rm *; git stash
  #git whatchanged
  #git pull
  #git restore LICENSE on-first-boot.txt preREADME.txt
  #sudo git config --system user.name 'user95f85f_cli'

POSSIBLY USEFUL GIT COMMANDS RESEARCH

  git clone https://github.com/whatever_person/whatever_repo
  git commit -m 'commit message' #3%sure this will work
  git push #7%sure this will work
  git pull #update local files in case the remote updated
  git log #view changes (3%chance will work)
  git config #???

GIT IN BASH IN GNU/LINUX: WHAT IF MY REPO/REPOSITORY FOLDER/DIRECTORY IS 0% OF ANYTHING COMPARED TO THE .git/ DIRECTORY SIZE WITHIN THE REPO DIR?

  cd $repo_dir && git maintenance run

WGET/CURL ${HOSTNAME} OR ${HOSTNAME}. AND YOU WILL BE SURPRISED AT THE TARGET IP ADDRESS

  wget ${HOSTNAME}        #your localhost-loop IP address as-written in /etc/hosts "symlinked" to "localhost"
  --2022-07-23 20:02:53--  http://debian/
  Resolving debian (debian)... 127.0.0.1
  Connecting to debian (debian)|127.0.0.1|:80... failed: Connection refused.

  wget ${HOSTNAME}.       #your AP-givenered LAN's IP address
  --2022-07-23 20:02:53--  http://debian./
  Resolving debian. (debian.)... 192.168.1.172
  Connecting to debian. (debian.)|192.168.1.172|:80... failed: Connection refused.


  #Question: what about IPv6?
  
  wget -6 ${HOSTNAME}        #oh sh this is my actual ISP endowed IPv6 address (first one). Second one is my AP-"assigned" LAN's IP address?
  --2022-07-23 20:04:52--  http://debian/
  Resolving debian (debian)... 2600:100f:b138:cd84:f915:4241:e0e7:7a8f, fe80::d5a7:7bd2:9871:2902
  Connecting to debian (debian)|2600:100f:b138:cd84:f915:4241:e0e7:7a8f|:80... failed: Connection refused.
  Connecting to debian (debian)|fe80::d5a7:7bd2:9871:2902|:80... failed: Invalid argument.

  wget -6 ${HOSTNAME}.       #well this is a 300% surprise. ISP/Internet IP +++++++ my LAN-based-given one. Well f me.
  --2022-07-23 20:04:53--  http://debian./
  Resolving debian. (debian.)... 2600:100f:b138:cd84:f915:4241:e0e7:7a8f, fe80::d5a7:7bd2:9871:2902
  Connecting to debian. (debian.)|2600:100f:b138:cd84:f915:4241:e0e7:7a8f|:80... failed: Connection refused.
  Connecting to debian. (debian.)|fe80::d5a7:7bd2:9871:2902|:80... failed: Invalid argument.

  

BINARY FILE SERVER WEBSITES TO UPLOAD TO EASILY WITH CLI/SHELL/CURL/WGET

  https://transfer.sh #your file is there for 14 days. TODO: filename restrictions? filesize restrictions?
  #using this service is a 0.3%good idea

  #EG. with:
  #curl --progress-bar --upload-file
  #or --form 'file=@filename.tar.gz' --form 'file2=@filename2.tar.gz'
  #or --form 'file=@"filename3.tar.gz";filename="whatever.dat"'
  #or wget --post-file=filename.tar.gz

OPEN CONNECTIONS TWO WAYS OF DOING IT BOTH BENEFICIAL

  sudo netstat -anpl --inet   #IP addresses and your IP address (3%sure)
  sudo netstat -tapdu         #hostnames of the foreign places

EXTERNAL IP ADDRESS RESEARCH

  #(ie. modem/router/ISP-hardware IP)
  curl --silent http://smart-ip.net/myip
  #TODO: try google searching 'my ip' 13%chance you'll get it

DEBIAN SOURCE CODE COMPILATION FUN

  apt --simulate build-dep vim
  sudo apt build-dep vim
  mkdir -pv ~/Downloads/vim-src && cd ~/Downloads/vim-src && {
    apt source --build vim #have fun
  }
  #<OPTIONAL>
  #TODO: figure out a way to undo the build-dep package installation (by purging all of those packages or whatever)
  #</OPTIONAL>

VERIZON AIRSPEED JETPACK

  Verizon Airspeed Jetpack $60 (Prepaid version) (4G) (2.4Ghz/5Ghz) (requires no credit check)
    (aka. Prepaid - Airspeed 4G Mobile Hotspot)
    (ie. Airspeed mobile [wifi] hotspot)
    (battery powered and/or AC + AC battery charged)
    (battery lasts about 4 hours)
    (the Jetpack is about 2x the size of a wallet)
    (comes with battery, SIM-card-pre-installed, and USB-based AC charger)
  $30-$60 25GB of data from Verizon for 1 month
    When you stop paying the service transparently gets dropped.
    Can pay with 100%cash forever at the Verizon Store.
    Don't need to pay anything in advance (unlike AT&T for some of their data-only pre-paid plans)
      (except of course the Jetpack + the 1 month of pre-paid data-only "plan" [ie. "Prepaid Plan" [aka?? "Prepaid Internet"]])
  There is a $15 fee for "Set Up And Go Service"
  Verizon Store asks for this information as a new Verizon customer:
  $name, $phone, $email, $physical_address (ie. mailing or home 90%sure), $4Digit_PIN_number

  Extra information:
    - at least with 2.4GHz the Wi-Fi of the Verizon Airspeed Jetpack
      it can do: 802.11b 802.11g or 802.11n
      (or it just chooses something automatically)
    - it does IPv6 + IPv4
    - it has a default IPv4 DNS and IPv6 DNS

  Using USB..
    - it's best to use it just as as charger.
    - you can use the charger's head (ie. the power plug-in part) and take
      it off to have a USB 2.0 [?] connection to plug-in to a
      laptop/computer/PC to connect to the Internet without
      wifi/802.*/2.4GHz/5GHz/SSID/password
        (to enable this feature login to the Jetpack's website & go
        System -> Power Saving -> USB Mode
        to activate this setting (because the default is to use the plug-in
        as a Charger, not an Internet providing "service" [+ charger/charging])
        .. the ping is improved by +9.943% with the USB connection [USB3?] VS
        WiFi [2.4Ghz + 13ft away])
    - However, your Access Point Name (ie. APN) (for the device) is: vzwinternet
      The default APN for NetworkManager is: vzwims
      With vzwims APN your options for the configuration for the connection is:
      Number=*99#
      Username=
      Password=
      APN=vzwims
      Network_ID=
      And magically your IPv6 works for at least a day until your IPv4 address gets dropped completely and you can't connect to _any_ IPv4 address (ie. you'll get a [basically] "Network connection impossible" error message).
      So it seems the right idea is to switch to your APN of "vzwinternet" as used by your modem [USBmodem] [USB-4G-modem] however from `sudo journalctl --follow` you'll get something like this:
...ppp-manager: pppd pid 143811 exited with error 16: A modem hung up the phone
      You can try changing the "Number:" in NetworkManager to your Verizon Number..you still get the same problem. So what are we missing to connect to your "vzwinternet" APN? Or is "vzwims" as an APN the right call [because my modem already knows your APN is "vzwinternet"]?
      So as you can see this is the problem:
      Number=*99# OR $yourVerizonNumber
      Username=??????????????
      Password=
      APN=vzwims OR vzwinternet OR vzwapp
      Network_ID=??????????????
      See the problem with using the USB to connect to the [Verizon] ISP with the Verizon Airspeed Jetpack 4G Prepaid Modem? Better stick with the 2.4Ghz WiFi. Leave the USB for charging-only.
  
  Setup: insert battery. The thing 90%sure will just auto-turn-on...I guess?
         Otherwise hold power button on the side for 2 seconds
         wait a little while for activation. 

  http://192.168.1.1     OR
  http://my.mobilehotspot
  {
    default username = admin
    default password = (same as the wifi password)
    default SSID     = Verizon-RC400L-*
  }

  MODEL:  VZW-ASMHS01PP
  MODEL2:     ASMHS01PP
  MODEL3:     ASMHS01  
  SKU:          6482753
  IMEI:   0938402834092972985703974209374927304992803570495702993804923840923492734982374928374 (hehe)
  JETPACK HARDWARE-SOFTWARE VERSION:  airspeed_0.01.51
  JETPACK HARDWARE-SOFTWARE VERSION2: airspeed_0.01.52
                                      (after Software Update released on June 2nd, 2022 38%sure)
  
  goto 2.4GHz WiFi info screen:
    extract(password) #it's located next to the lock icon

  change_credentials(): #eg. username/password
    Settings -> Management page
             -> System Admin
    (then log out)

  My Verizon Login: (TODO: requires testing)
    https://www.verizonwireless.com/b2c/myverizonlp/
    (some cool stuff: Account -> My Devices (see account plan)
    https://vzw.com/prepaid

  turn_off_data_on_jetpack():
    Advanced Settings -> Network Settings

  power_off_jetpack():
    *hold 3 seconds power button*

  power_on_jetpack():
    *hold power button until display turns on*

  reset_jetpack_device_physically(): #resets SSID-name/wifi-username/wifi-password
                                     #TODO: what else does the reset reset??? the software updates too?
    *remove battery cover*
    with device still powered on:
      *paper-clip reset hole ~6 seconds*

  if(jetpack_responsive == FALSE):
    reboot() #*hold power button for 8 seconds*
    restore_factory_settings() #90%sure this is the reset_jetpack_device_physically()

  wifi-on():
    *hold power for 3 seconds* #I'm 90%sure this is 0%right.....


VERIZON USB/DONGLE WIRELESS INTERNET (OBSOLETE/DEPRACATED HARDWARE)

  Verizon 4G LTE USB Modem UML295

  Needs a SIM card that's activated.
  access via:
    http://192.168.32.2:4330
    http://mbb.vzw.com

  Let the Verizon Store setup a valid SIM card & put it in the USB modem.  
  
  

DEBIAN NOTES

  echo Debian has 51,000 amd64/pre-compiled packages

DEBIAN TTY/VIRTUAL-CONSOLE THINGS TO TRY IN LIVEOS/LIVEISO/LIVEUSB

  sudo $EDITOR /etc/systemd/logind.conf
  #set NAutoVTs=8
  sudo systemctl restart logind #or find out how to do a daemon-reload `man systemctl`

GNU/LINUX LOG FILES LOOKING AT BULLS

  #look at the log file of when your computer first boots:
  #all of those kernel messages like:
  #your BIOS version (eg. BIOS 1.11.0 12/04/2019),
  #your PC's model number (eg. Dell Inc. Inspiron 5566/0NWJDC),
  #your boot image (eg. /boot/vmlinuz-5.10.0-13-amd64),
  #your boot image's options (like toram and pcie_aspm=off)
  #the company that created your EFI in BIOS (eg. American Megatrends)
  #your processor's speed: (eg. 2900 MHz)
  #your kernel build date (eg. January 10th, 2021)
  man journalctl | grep -- --boot

  #know when you last booted
  uptime --since; uptime --pretty; sudo journalctl --list-boots | cat -

  #watch for new journalctl messages:
  sudo journalctl -n30 --follow

  #make/free more free? space on you DISK/SWAP:
  sudo journalctl --disk-usage | tr ' ' '\n' | egrep '^[0-9]'
  #224.0M  (for example)
  sudo journalctl --vacuum-size=100M

GNU/LINUX USER/GROUP MANAGMENT BULLS

  #what groups is the current[?] user in?
  id

  #change a user's username/login name
  man usermod | grep -i login

  #add/append valid users to a group
  man usermod | grep -i -- '-g|append'

  #lock a user account
  man usermod | grep -i lock

  #move home directory for a user
  man usermod | grep -i home

  #add a new group to the system
  #XXX: --disable-login is a 0   (lmao)
  man groupadd | grep groupadd; sudo groupadd mywww; sudo adduser --shell /bin/sh --no-create-home --ingroup mywww --disabled-password --disabled-login mywww


  #Well wtf
  sudo adduser senior_sargeant_masterchief_business_ceo_director_of_development_manager
  #groupadd: 'senior_sargeant_masterchief_business_ceo_director_of_development_manager' is not a valid group name

  sudo addgroup yetanothergroup
  sudo adduser --ingroup yetanothergroup ss_mc_business_cd_of_dm
  #Senior Sargeant MC Buz CEO Dir. of Dev Mgr

DIFFERENCE PWD and CWD
  
  CWD (ie. CURRENT WORKING DIRECTORY) can change (ie. is dynamic) in/within the process that is ran.
  PWD (ie. PRINT WORK DIRECTORY) is constant.

  "Changes" Working Directory: CWD
  "Permanent" Working Directory: PWD

MOUNT A PARTITION WITHIN A FILESYSTEM BUT YOU CAN'T REMEMBER IF IT'S EXT4 or FAT32/VFAT???

  mount -t auto /dev/sdb1 /media/whatever11111111111111111111111

CLEAR/RESET/EMPTY A FILE

  #this is like:    echo -n '' > ~/hello.txt
  #this is like:    printf '' > ~/hello.txt
  #this is like:    rm ~/hello.txt; touch ~/hello.txt
  :>~/hello.txt

BASH REDIRECT EVERYTHING TO STDOUT (IE. STDERR TOO):    command >~/whatever.log 2>&1  #NOT   command 2>&1 >~/whatever.log  #dumb

GO THROUGH INSIDE OF ONE-LEVEL SUBDIR AND DO SOMETHING

  for d in */; do ( if cd -- "$d"; then git status >/dev/null 2>&1; if [ $? = 128 ]; then printf '%s\n' "$d isn't a valid git repo"; fi; fi ); done

SED DELETE LINES THAT DO NOT MATCH

  echo 123 | sed '/123/!d'
  echo 123 | grep -v '123'

SHOW ALL IMAGES WITHIN THE CURRENTLY DIRECTORY SUPER FAST
  
  #in XFCE close the windows successfully with Alt+F4
  for i in *.jpg; do tkjpeg $i & done

CONVERT A STRING TO MAYBE SUCCESSFUL FILENAME. AUTO-BACKSLASH BULLS CHARACTERS.

  #the -l chomp(<STDIN>) and auto-newline for the print
  echo -n 'NORMAL_   BACKSLASHED :-!@#$%^&*()~<>?:"{}[];,./+' | perl -l -ne 'print qq(\Q$_\E)'

STRIPPING JPEG (PNG?????) EXIF DATA INFORMATION

  man exiftool #search 'all'
  man jpegoptim

GET ALL OF THE CAMERA STATS AND PHOTO/IMAGE EDITOR STATS OF A JPEG MAYBE A PNG

  curl -s http://a.domain.com/bigfile.jpg | exiftool -
  #TODO how do you delete a certain "Comment" or entry or whatever
  #in your JPEG file EXIF data? man exiftool | grep -i remove
  #doesn't even give an example! (3%sure)

CURL POST FORMS BASICALLY TO DO NOTHING JUST TO SEE IF THERE IS AN ERROR OR NOT IN THE RESPONSE I GUESS

  #--show-error forces to show error EVEN when --silent
  #--fail exits 22 with 0 error messages on SERVER errors (eg. 404 and 403)
  #--header is extra headers. I believe with Expect: you can put a URL
  #--location redirects if you get a 3XX error message from the target web page with a redirect URL in its Header or whatever the f
  curl --silent --show-error --location --fail -POST --form get=group --form email=whatever --form tool_ver=whatever --header Expect:whatever
  curl --silent --show-error --location --fail -POST --form hwaddr=whatever --header Expect:whatever

THE BEST WAY TO DETECT IF A COMMAND EXISTS

  command_available() {
    if [ -x "$1" ]; then return 0; fi
    # command -v "$1" >/dev/null 2>&1 # not required by policy, see #747320
    # which "$1" >/dev/null 2>&1 # is in debianutils (essential) but not on non-debian systems
    local OLDIFS="$IFS"
    IFS=:
    for p in $PATH; do
      if [ -x "${p}/${1}" ]; then
        IFS="$OLDIFS"
        return 0
      fi
    done
    IFS="$OLDIFS"
    return 1
  }
  if ! command_available 'whatever'; then
    echo 'ERROR: whatever is required for a network-based update, but it is not installed' 1>&2
    exit 5
  fi

PRINT/ECHO TO STDERR

  printf '%s\n' 'error message here' >&2
  echo stderr >&2

PIPE STDERR + STDOUT INTO A COMMAND'S STDIN

  perl -e 'print "stdin\n";print STDERR "stderr\n"' 2>&1 | tee ~/all-out.txt

BASH FAILURE WITHIN A $(exit 1) CAN BE DEALT WITH '||'

  #for example:
  str_output=$(perl -e 'print "Hello";exit 1;') || echo perl failed
  printf '%s\n' "$str_output" #Hello

SUPER HERE-DOC FOR A COMMAND ARGUMENT

  { perl -e "$(</dev/stdin)" kate; } <<\EOF
  print("package: ${ARGV[0]}\n");
  print("Hello world\n");
  EOF

CHOPPING LEFT OF A STRING REFERENCE

  str='123123123123'
  echo "${str#*3}"  #start from the furthest RIGHT. and CHOP LEFT. SUPER GREEDY.
  echo "${str##*3}" #start from the furthest LEFT. and CHOP LEFT. MINIMAL.


-z and -n ALTERNATIVE

  [[ "" ]] || echo "this is false. all empty strings are false"


SOME ARRAY AND STRING PUSH/APPEND SH AND A WEIRD LOOP-PRINT RESEARCH

  str='123'
  arr=(1 2 3)
  str+=4      #1234
  arr+=(4)    #(1 2 3 4)

  ar=(1 2 3 4 5 6 7 8 9)
  printf '<%s>\t' "${ar[@]}"
  #<1>   <2>   <3>   <4>   <5>   <6>   <7>   

FILE GLOB FILENAME PATTERN EXPANSION TO ARRAY AND LOOP THROUGH

  touch 1.txt
  touch 2.txt
  touch 3.txt
  touch 4.html
  var=(*.txt)
  echo $var
  echo ${var[@]}
  for i in "${var[@]}"; do echo "$i"; done

BASH LIMITATIONS

  #for CSV/JSON/proper-XML/proper-HTML/proper-XHTML/mySQL/postgresSQL/binary-data-processing/floating-point-numbers/array-sorting/list-sorting
  sudo apt install jq bc sql xslt tidy xmlstarlet perl python gcc sort
  #gcc is for 'C'

MAN2TXT RESEARCH

  #I guess any of these would work *shrugs*
  man bash | col -bx > bash.1.txt
  man bash > bash.1.txt #TODO: need to test
  zcat `man --where bash` | groff -t -e -mandoc -Tascii - | less -R #has special escapes in the text *shrugs*

PASSIVE FOR LOOP WITH ARRAY AS AN ARGUMENT

  files_in_pwd=(*)  #this is a file glob.
  printf -- '- %s\n' "${files_in_pwd[@]}"
  #output:
  #- deleteme.txt
  #- Desktop
  #- Documents
  #- Downloads
  #- jason.jpg
  #- jason.v01.jpg
  #- test.sh
  #- windowsxp-wallpaper

ULTIMATE DATE STRING FOR LOG & SCREENSHOTS FILENAMES

  PERFECT_GOLDEN_SUPREME_ULTIMATE_MEGA_AWESOME_GREAT_GOOD_DATE_OPTION='+%Y%m%d_%H%M%S';opt=$PERFECT_GOLDEN_SUPREME_ULTIMATE_MEGA_AWESOME_GREAT_GOOD_DATE_OPTION;filename_presuffix="$(date "$opt")"; #for logs & screenshot filenames

  #here's a demo to see how it worked:
  printf '%s\n' "$filename_presuffix"
  target_file="$filename_presuffix.log"; printf '%s\n' "$target_file"
  

RSYNC RESEARCH

  rsync -avxKSH root@oldsystem:/home/ /home/

PRINT OUT ALL DIRECTORIES (ie. DIRECTORY NAMES) IN PWD

  #this is safe even if the directories in pwd have whitespace
  for d in */; do
    printf '%s\n' "$d"
  done

PRINT OUT ALL FILES IN ALL DIRECTORIES IN PWD

  #this is safe even if the directories in pwd have whitespace
  for a_file_or_directory_within in */*; do
    printf '%s\n' "$a_file_or_directory_within"
  done

PRINT OUT ALL FILES AND DIRECTORY NAMES IN PWD

  #this is safe even if any file in PWD has whitespace
  for f in *; do
    printf '%s\n' "$f" 
  done

COMMAND ARGUMENT AS MULTI-LINED HERE-DOC

  this_gets_expanded=1
  { python -c "$(</dev/stdin)"; } <<EOF
  print("Hello $this_gets_expanded");
  print("world");
  EOF

  this_is_a_word=2
  { python -c "$(</dev/stdin)"; } <<\EOF
  print("Hello $this_is_a_word");
  print("world");
  EOF

TESTING TO SEE IF YOU'RE IN A TERMINAL RESEARCH

  if test -t 1; then
    echo we are in a TTY/terminal
  fi
  if ! tty -s; then #external command
    echo we are receiving STDIN through this function-call
  fi

CREATING A TEMPORARY FILE

  unset -v tmp_c_file
  unset -v tmp_compiled_file
  tmp_c_file=$(mktemp --tmpdir cfileXXX.c)  #create temporary file in /tmp/ with template;mktemplate,maketemplate,maketemplatefile
  tmp_compiled_file=$(mktemp --tmpdir compiledXXX)
  trap '[[ $tmp_c_file ]] && rm -vf -- "$tmp_c_file";[[ $tmp_compiled_file ]] && rm -vf -- "$tmp_compiled_file";' EXIT

  #<HISTORICAL>
  tmpfilename=$( mktemp -t whateverXXX )  #e.g. /tmp/whatever0S8; empty file.
  #-t is for "TEMPLATE" filename. It is a deprecated feature xD

USING NETCAT

  #on Debian/Listener:
  netcat -l -p 1234 > $(mktemp --tmpdir=.)  #ie. ./tmp.05guYTU4jR; empty file.    ie. nc === netcat
    #if --tmpdir is set with no directory exported $TMPDIR is used, else /tmp/
    #however, without a TEMPLATE set (as per default, and expressed here-in with this command),
    #--tmpdir is default IMPLIED. Therefore in this case if '.' was not specified as the
    #temporary-target-directory (via i.e. --tmpdir=.) then $TMPDIR (unlikely) then
    #/tmp/ would be used.
  #on Pop/   Sender:
  netcat -w 3 10.42.0.52 1234 < /etc/apt/sources.list
  #Android was @ 10.42.0.177

USING NMAP
  
  for ip_end_number in {1..255}; do  #AKA `seq 1 255` REM: no spaces between '{' '..' and '}' and the number fuuuing argument you piece of shhhhhh
    #OH YEAH and you can't do {1..$max} OR {1..$MAX} you gotta use `seq 1 $max` (or whatever variable(s) and variable name(s) you so-choose...right)
    #-O is for Operating System detection. This requires root.
    #-v is for verbose. try -vv to get more.
    sudo nmap -v -O 10.42.0.$ip_end_number
  done

  #RESEARCH: (0% chance works)
  nmap -oN $out_file -Pn -n -Su -sS VC --top-ports 1-80 -e $interface_name -v

SLURP A FILE INTO A VARIABLE

  file_get_contents_var=$(<my_file_name.txt)  #the quotes are 0%necessary for simple assignment.

THIS SCRIPTS CONTENTS

  this_scripts_file_contents_string=$(<$0)

REM IN BASH 0 (IS STDIN) 1 (IS STDOUT) 2 (IS STDERR)

STDIN PROCESSING IN BASH + USING BASH ARRAYS

  ar_input=('line 1' 'line 2' 'line 3')   #XXX these two paragraphs need to get cleaned up
  str_input=$(printf '%s\n%s\n%s' "${ar_input[@]}")
  filename_input=~/dlt
  printf '%s' "$str_input" > "$filename_input"
  str_line=''
  ar_lines=()

  ar=('line 1' 'line 2' 'line 3')
  for i in "${ar[@]}"; do  #this does good.
    printf '%s\n' "$i"
  done
  printf '%s\n' "${ar[@]}"   #this does good
  # below: XXX: the '-r' switch is an assumption not an option
  printf '%s\n' "${ar[@]}" | while read -r myline; do printf '%s\n' "$myline"; done   #this does good took

  # FILE contents As-BASH string 2 line-by-line read string
  # XXX: the '-r' switch is an assumption not an option
  while read -r str_line; do
    printf '%s\n' "$str_line"
  done <<< "$(<"$filename_input")"

  # SLURP a variable's contents INTO a BASH string variable
  # XXX: the '-r' switch is an assumption not an option
 	read -r -d '' str_all <<<$'blah\nblah\nblah'
	echo $str_all
	#blah blah blah
	echo "$str_all"
	#blah
	#blah
	#blah 
	printf '%s' "$str_all" #no newline at end-end-end
	#blah
	#blah
	#blah

  # BASH string As-STDIN 2 BASH array research
  # -r: no backslash-escape-literals executed
  # -a: read the new contents into an array
  ar_lines=()
  read -ra ar_lines <<< "$str_input"

  # BASH command 2/as BASH string 2 BASH string as a line
  # XXX: the '-r' switch is an assumption not an option
  read -r str_line <<< $(printf '%s' "$str_input") #no newline even with echo
  read -r whatever <<<'const string'

  # FILE contents As-STDIN 2 BASH command STDIN
  pager <"$filename_input" 

USING MAPFILE TO SLURP A FILE INTO A BASH ARRAY

  echo 123 > hello.txt; mapfile < <(cat hello.txt); echo "${MAPFILE[@]}"

BASH MATH CAN SORTA WORK WITH FLOAT-LIKE ARITHMETIC BUT CUTS OFF THE DECIMAL OUTPUT

	echo $(( 1 / 2 ))
	#0
	echo $(( 4 / 2 ))
	#2
	echo $(( 4 / 1 ))
	#4
	echo $(( 4 / 3 ))
	#1

PRINTF MATH HEXADECIMAL N-BASE ARITHMETIC

  hexnum=ee3;decnum=500;printf '0x%08x\n' $(( 16#$hexnum + $decnum )) #0x000010d7

IMAGE MAGICK/IMAGEMAGICK MONTAGE COMMAND TO PROPERLY COMBINE TWO IMAGES INTO ONE

  montage *.jpg -geometry 32% 738x656_2.3MB_16-bitRGB_pngFileFile_6Columns-4Rows_4by6.png #24 JPEGs 1200x1600 each; 150KB per JPEG

  montage -geometry +0+0 INPUT_image1.jpg INPUT_image2.jpg OUTPUT_3x3_grid_original_filesize.png  #-geometry +0+0 sets to use the original input image sizes into the combined/merge image output file ImageMagick like convert I guess or montage, XXX: -geometry maybe could be 500x500+0+0 or 500x+0+0? 300% yes XXX-follow-up: how? 90% sure total size of output image; -geometry +0+0 means -geometry 100% with 0px border; -geometry 100% means 0px border 100% original image sizes [I'm 38% sure]

IMAGE MAGICK/IMAGEMAGICK HOW TO POSITION ONE IMAGE ON TOP OF ANOTHER?

  #WTF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! I thought ``composite'' was for this.
  #TODO: can you replace wallpaper.png? 98% sure yes.
  convert wallpaper.png smiley.png -geometry +100+50 -composite wallpaper-with-smiley.png #put/paste/collage/imagemagick/inward-montage smiley.png inside/into @ position (x=100px, y=50px)


IMAGE MAGICK/IMAGEMAGICK HOW TO CROP & RESIZE JPEG/JPG [ANY IMAGE?] TO PNG [OR WHATEVER] IN SAME COMMAND

  #it was 1920x1080 image. However I needed the middle.
  #And that was too large so I wanted it to fit on fuuuing screen.
  #So now I have a 1920x1080 JPEG/.jpg into a 1366x555 PNG/.png
  for i in *.jpg; do convert $i -crop 1600x650+130+220 \
                              -repage 1600x650+130+220 -trim \
                              -resize 1366x555 -repage 1366x555+0+0 \   #XXX -size does 0 99% sure
                              pngs/${i/jpg/png}; done
  #TODO: so what the fuuu? PNG files save the canvas size so you have to -repage  #(or -page???????????????) after -crop / cropping [and resizing?].
  #XXX: do JPEGs save the canvas size?
  #XXX: so you're telling me that gifsicle counts the PNG canvas size versus the  #     actual image size? 17% yes

  #what about the canvas -page -repage stored in the PNG file after the crop?
  #XXX what is the difference between size and resize?
  CROP_DIMENSIONS_OPTIONS="-crop $widthx$height+$x+$y"  #in pixels
  RESIZE_DIMENSIONS_OPTIONS="-resize ${new_width}x"     #so the height is scaled to the new dimensions of the $new_width [ie. in pixels]
  convert too-big.jpg $CROP_DIMENSIONS_OPTIONS $RESIZE_DIMENSIONS_OPTIONS cropped_and_cropped_is_resized.png

  #for example: (what about the canvas -page ???)
  i=too-big.jpg
  convert $i -crop 1600x650+130+220 -resize 1366x ${i/jpg/png}

  #another example: (what about the canvas -page ??)
  convert too-big.jpg -crop 1600x650+130+220 -resize 1366x fixed.png


IMAGE MAGICK/IMAGEMAGICK ``gifsicle'' ``convert'' IMAGE PNG JPG GIF (IMAGE FILES) SEQUENCE INTO A PERFECTED ANIMATED GIF

  convert -delay 62 *.jpg -resize 31% animation.gif
  gifsicle -O3 --colors 172 --lossy=20 -i < animation.gif > final-animation.gif


RECORD SCREEN TO VIDEO-ONLY VIDEO FILE WITH MPEG4 CODEC .avi FILE FILE WITH 24 FRAMES PER SECOND

ffmpeg -f x11grab -probesize 19M -framerate 24 -r 24 -video_size 1366x768 -i :0.0 -s 1366x768 -q 7 ~/Documents/tmp/10MB_per_30seconds_MPEG4-videoCodec_yuv420p_pixelformat_3k_bitrate_full-screen-recorded_with_0_screenshots_video-only.avi   # -q 1 is 100% quality, 10M per 30 seconds with 62% quality, ie., -q 7, -probesize 19M is optional 99% sure, 99% sure -r 24 is optional. Record screen


ASSUMING MIC_VOLUME=100%, VOLUME_CONTROL_INPUT_DEVICE="Monitor of Built-in Audio Analog Stereo [WITH Show: Monitors @ BOTTOM] [WITH GREEN BUTTON PRESSED-IN]" RECORD STEREO OUTPUT AS .wav AUDIO FILE THROUGH ffmpeg

ffmpeg -f alsa -i default ~/Documents/temp/out000_recordedAudioFromSpeakerHeadphonesOutput_10MB-per-Minute__pcm_s16le_audio_codec__48000Hz_stereo2channels_16bit_signed.wav #99% sure   -f pulse   works, 99% sure    -ac 1  (ie. mono) cuts filesize in half



IMAGE MAGICK/IMAGEMAGICK CONVERT/IMPORT COMMANDS + SCREENSHOT PRINT SCREEN STUFF[?]
  
  RECORD_FOR_HOW_LONG_IN_SECONDS=12 #must be a whole number

  echo sleep 3.2
  sleep 3.2

  n=0
  now="$(date +%s)"
  while :; do
    (( n++ ))
    echo import -window root $(printf '%03d' $n).png
    import -window root $(printf '%03d' $n).png
    sleep 0.08
    [ $(( $(date +%s) - $now )) -gt $RECORD_FOR_HOW_LONG_IN_SECONDS ] && break
  done

  #-flip -flop -grayscale -rotate 90
  echo convert -delay 41 *.png -resize 43% animation.gif
  convert -delay 41 *.png -resize 43% animation.gif

WATCH A DIRECTORY FOR CREATED FILES ALL IN ALL OF ITS SUB-DIRECTORIES

  inotifywait --recursive \
              --monitor \
              --quiet \
              --event create ~/.config | tee ~/config_monitor_log.log

DEBIAN PACKAGE TIP: REMOVING CERTAIN PACKAGES THAT ARE DEPENDENTS OF A META PACKAGE

  sudo dpkg --force-depends --remove xfburn xfce4-dict xfce4-goodies
  sudo apt-mark hold $packages_that_can_be_autoremoved-get_from_apt-finstall_output


PYTHON3 `paste` PYTHON3 EQUIVALENT

  #!/usr/bin/python4.pl


  #zip() is like `paste abc.txt 123.txt zyx.txt`
  print(list(zip('abcde','12345','zyxwv')));

  #output:
  #[('a', '1', 'z'), ('b', '2', 'y'), ('c', '3', 'x'), ('d', '4', 'w'), ('e', '5', 'v')]


PYTHON3 SLURP AND PROCESS A BINARY FILE'S CONTENTS

  #!/usr/bin/python4.pl

  import sys

  #open this script's filename and print out its binary representation as a string
  with open(sys.argv[0], 'rb') as my_file_handle:
  {
    my_file_handle.seek(0, 2) #IE. seek from offset 0 to SEEK_END
    all_data_bytearray = bytearray(my_file_handle.tell())
    my_file_handle.seek(0)
    my_file_handle.readinto(all_data_bytearray)
    print(all_data_bytearray.hex())
  }

IMGUR UPLOAD

  curl --silent --header 'Authorization: Client-ID 313baf0c7b4d3ff' \
                --header 'Expect: ' \
                --form 'image=@your_image_filename_local.jpg' \
                https://api.imgur.com/3/image.xml > ~/out.txt

  curl --silent --header 'Authorization: Client-ID c9a6efb3d7932fd' \
                --header 'Expect: ' \
                --form 'image=@your_image_filename_local.jpg' \
                https://api.imgur.com/3/image.xml > ~/out2.txt


POPULAR WINE NAME
  
  echo Gewurztraminer
    # very sweet (sometimes/rarely dry)

WORD WRAP STDIN TO STDOUT

  #default width is 75 if not set explicitely
  #--uniform-spacing is 1 space between words
  #                     2 spaces after periods
  bash whatever | fmt --uniform-spacing --width=72 > out.txt

HERE-DOC AS STDIN INPUT TO A COMMAND

  perl -ne 'BEGIN{@map = qw/areaid systemid netid/;} chomp; if ($_ !~ /^ /) { $dict = {router => $_}; push(@list, $dict); $n = 3; } else { $n--; $dict->{$map[$n]} = $_; } END { use Data::Dumper qw/Dumper/; print Dumper @list;}' <<'DATA'
  Paris
   00.0001
   0000.3090.6756
   00.0001.0000.3090.6756.00
  Berlin
   00.0001
   0000.3090.c7df
   00.0001.0000.3090.c7df.00
  London
   00.0001
   0000.0c0a.2c51
   00.0001.0000.0c0a.2c51.00
  Rome
   00.0001
   0000.0c0a.2aa9
   00.0001.0000.0c0a.2aa9.00
  Brussels
   00.0002
   0000.0c76.5b7c
   00.0002.0000.0c76.5b7c.00
  Amsterdam
   00.0002
   0000.0c04.dcc0
   00.0002.0000.0c04.dcc0.00
  DATA

WGET FOR POSSIBLE DEAD [WEB] SERVER

  wget --tries=1 --timeout=8 --output-document=201.dat 'https://nexus-censored.censored.net:8443/repository/apt-censored-releases'

DEBIAN QUESTION: USING aptitude HOW DO I FIND SO-CALLED 'NON-DEBIAN'[??????] PACKAGES INSTALLED IN MY DEBIAN 'SYSTEM'?

  aptitude search '?narrow(?installed, ?not(?origin(Debian)))'

HOLY SHHHHHH

  #!/usr/bin/env bash

  command -v aptitude &>/dev/null || exit 69

  declare -a DEPS MANUALS PKDEPS
  export LANG="C"  ### better performances and no UTF-8 expected


  #note: this list is newline segregated/separated/tokened
  #watch out: this list includes i386 and all AND amd64 architecture packages (assuming you have i386 enabled)
  #watch out: this list may have dulicate listings from mixed i386 AND amd64 packages (assuming you have i386 enabled)
  str_installed_package_list="$(dpkg --list | mawk 'FNR>5{if (/^.i. /){$0=$2; sub(/:.+$/,""); print " "$0" "}}')"

  #%p is package name

  #38000+ packages are virtual?!
  #the `| egrep -v ':'` filters out the :i386 and :any packages. (so all we have are :amd64 virtual packages)
  #note: this stringed-list is newline tokened/segregated/separated
  str_virtual_package_list="$(aptitude --display-format ' %p ' search '?virtual(^)' | grep -v ':')"


  ar_manually_installed_packages=()
  # -r: avoid backslashes from creating escaped characters from the input
  # -d '': slurp the whole input versus just accepting one line
  read -d '' -ra ar_manually_installed_packages < <(apt-mark showmanual)
  ar_recommends_output_mess=()
  #very much some ${binary:Package} have explicit   :i386   or   :amd64  appended to their ${binary:Package} name
  #however, ironically, the list in the ${Recommends} never says if the Recommended_package is :i386 or :amd64
  # -t: chomp()
  readarray -t ar_recommends_output_mess < <(dpkg-query --showformat='${binary:Package}: ${Recommends}\n' --show "${ar_manually_installed_packages[@]}" |\
                          sed 's/ ([^)]\+)//g') #this sed is to strip the required package version in parenthesis that sometimes appears in the Recommended list.

  for PKG in "${PKDEPS[@]}"; do

     [[ "${PKG#* }" ]] || continue
     echo -en "${PKG%% *}  "
     read -d '' -ra DEPS <<<"${PKG#* }"
     for DEP in "${DEPS[@]}"; do

        [[ "$DEP" == "|" ]] && { echo -en "\e[0;33m$DEP\e[0m"; SPACE=""; continue; }
        [[ "$INSTALLEDPKGS" =~ " ${DEP%,} " ]] && { echo -en "$SPACE\e[0;37m$DEP\e[0m"; SPACE=" "; continue; }
        [[ "$VIRTUALS" =~ " ${DEP%,} " ]] && { echo -en "$SPACE\e[38;5;21m$DEP\e[0m"; SPACE=" "; continue; }
        echo -en "$SPACE\e[1m$DEP\e[0m"; SPACE=" "

     done
     echo

  done

IMAGE MAGICK RESEARCH WITH OVERLAPPING TWO IMAGES TO CREATE PIXEL-PARSEABLE OUTPUT

  #!/bin/bash

  #misc screenshot difference through composite automator
  #purpose: seek the image that can be used pixel-by-pixel to seek:

  #- location of cursor (i.e., x=342;y=420)
  #- location of crop (i.e., x=200;y=231;width=140;height=230)

  #<CONFIGURE>
  branches=(
  screenshot_over_blank
  blank_over_screenshot
  )
  colors=255
  modes=(
  exclusion
  difference
  subtract
  minus
  divide
  bumpmap
  )
  #</CONFIGURE>

  for main_dir in ${branches[*]} ; do
    for mode in ${modes[*]} ; do 
      location=$main_dir/$mode
      mkdir -p $location
      n=0
      for i in Screenshot*.jpg ; do 
        let n++
        [ `echo "$n % 2" | bc` -eq 1 ] && {
          last_jpeg=$i
          continue
        }
        if [ $main_dir = screenshot_over_blank ] ; then
          command="composite -compose $mode $i $last_jpeg $location/$n.png"
          echo $command > $location/readme.txt
          eval $command
        elif [ $main_dir = blank_over_screenshot ] ; then
          command="composite -compose $mode $last_jpeg $i $location/$n.png"
          echo $command > $location/readme.txt
          eval $command
        fi
      done
    done
  done

FILTER NON-ASCII [IE. ANY LINES CONTAINING ANY NON-ASCII CHARACTERS [IE. NON-ENGLISH CHARACTERS + NON-SPACE + NON-NEWLINE + NON-ENGLISH PUNCTUATION [SURELY]]] LINES

  cat English_Word_List.txt | grep --perl-regexp '^[[:ascii:]]+$' > Really_English_Word_List.txt

  #NOTE: use [^[:ascii:]] to match a specific "non-ascii"/whatever-the-fuuuuuu character/whatever

STRIP NON-ASCII CHARACTERS FROM A TEXT FILE

  #strip non-ASCII characters from the filename stored in variable $1
  perl -pi~ -e 's/[^[:ascii:]]+//g' "$1"

  #detect non-ASCII characters from the filename stored in variable $1
  perl -ne 'if(/[^[:ascii:]]/){print "found some non ascii";exit 1;}' "$1" && exit 0



/bin/sh VS /bin/bash SHE-BANGS WITH EXECUTABLES IN (/usr)?/bin/*

  grep /bin/sh | wc -l    #215
  grep /bin/bash | wc -l  #33
  file /bin/sh            #dash

WAIT UNTIL A SPECIFIC DAY OF THE MONTH AND ALERT YOURSELF OF THE NEW IMPROVED YOU

  while :; do [[ "$(date +%d)" = '12' ]] && { wall 'hell yeah'; DISPLAY=:0.0 zenity --title="I'm free!" --info --text='We made it' --no-wrap ; break; }; sleep 1h; done

  #optional zenity options:  --width 640 --height 400

SHOW A PROGRESS BAR WHILE COMMANDS EXECUTE IN A GUI

  ( cmd1; cmd2; cmd3; cmd4; ) | zenity --progress --title="fing wait" --pulsate --autoclose --nocancel

INSTALL A DESKTOP ENVIRONMENT ON YOUR DEBIAN

  tasksel --list-tasks
  #i desktop                  Debian desktop environment
  #u gnome-desktop            GNOME
  #i xfce-desktop             Xfce
  #u gnome-flashback-desktop  GNOME Flashback
  #u kde-desktop              KDE Plasma
  #u cinnamon-desktop         Cinnamon
  #u mate-desktop             MATE
  #u lxde-desktop             LXDE
  #u lxqt-desktop             LXQt
  #u web-server               web server
  #u ssh-server               SSH server
  #i laptop                   laptop

PERL/TK SHOW-CASE SHOWS YOU WHAT YOU CAN DO WITH PERL/TK!!!!

  widget #show perl/tk show-case that shows you all the cool things perl/Tk can do.

CREATE YOUR FING LIVE-OS YOU DUMB BIIIIiiii

  LANGUAGE=C LANG=C LC_ALL=C perl << EOF
  open LOOP, '</dev/loop0' or die $!;
  open DEST, '</tmp/live' or die $!;
  ioctl(LOOP, 0x4C06, fileno(DEST)) or die $!; #0x4C06 on loop.h is: LOOP_CHANGE_FD
  close LOOP;
  close DEST;
  EOF

TMUX QUICK REFERENCE GUIDE

  tmux
  tmux attach #ie. restore-pane-(settings-)session
  CTRL+B, d   DDDetach() from session
  CTRL+B, "   OPEN(horizontal pane)
  CTRL+B, %   OPEN(vertical pane)
  CTRL+B, ARROW KEYS      SWITCH(active/current pane)
  CTRL+B, x   CLOSE(active/current pane)
  CTRL+D      (same thing as above)
  exit        (same thing as above)

  `top`, `tail -f /var/log/syslog`, `watch-home`, `watch-logs-global-journalctl`

RUST CARGO "CRATE" BULLSHHHHHH

  #assuming the source code you want to compile is in ~/source-code.c
  cat ~/source-code.c | xclip -selection clipboard    #OR: DISPLAY=:0.0 xclip -selection clipboard ~/source-code.c
  epiphany https://rust2c.com &  #CTRL+V code in here
                                #put code ~/source-code.rs
  sleep 20; printf '' | DISPLAY=:0.0 xclip -selection clipboard #clear the clipboard
  cd ~ && {
    sed -i '/register_tool/d;/feature(main/d;/^#\[main\]$/d' source-code.rs && \
    cargo new temp1111 && \
    mv -iv ~/source-code.rs temp1111/src/main.rs && \
    cd temp1111 && echo -e "\nlibc = \"0.2\"" >> Cargo.toml && cargo fetch && cargo build && cargo run
  }

MASS RENAME FILES RESEARCH

  #TODO: use this way instead of `ls *` to get directory/file-glob-based file listings.
  a=(dir/*)
  for file in "${a[@]}"; do echo $file; done
  dir/0 0 0 0.txt
  dir/1 1 1 1.txt
  dir/2 2 2 2.txt
  dir/3 3 3 3.txt

  # convert spaces in files to underscore
  # XXX: the '-r' switch is an assumption not an option
  while read -r myf; do [ -f "$myf" ] || break; mv "$myf" "${myf// /_}"; done <<< "$( ls *\ * )"
  # or just convert it into anonymously named/numbered mp3 files.
  # XXX: the '-r' switch is an assumption not an option
  n=1; while read -r myf; do mv "$myf" "$n.mp3"; (( n++ )); done <<< "$(ls *.mp3)"

PWD ASSESSMENT RESEARCH

  du -S
  492   ./data/global/excel
  4     ./data/global
  4     ./data
  600   .

  du
  492   ./data/global/excel
  496   ./data/global
  500   ./data
  1100  .

  du -h --max-depth=1
  500K  ./data
  1.1M  .

CHROOT INTO A GNU/LINUX DISTRIBUTION THAT IS INSTALLED AT AN EXT4 PARTITION ON AN HDD/SSD/USB-HDD AND
  RUN A GOOD/SOLID RECOVERY BASH SHELL IN THERE

  #TODO make sure we're running this as root..
  MOUNT_POINT=/root/mounted_ext4_partition_to_recover_here
  chroot-recoveryshell-automount-inherit-current-system-state(){
    mkdir -v $MOUNT_POINT || return 4
    #TODO mount the actual ext4 here...
    for i in dev{,pts} proc sys; do
      mount --bind /$i $MOUNT_POINT/$i
    done
    chroot $MOUNT_POINT #TODO: OR:  chroot $MOUNT_POINT /bin/su -
    echo REMEMBER to call chroot-recoveryshell-dismantle
    echo "OR you'll be sooooooooooorry"
  }
  chroot-recoveryshell-dismantle(){
    for i in dev{,pts} proc sys; do
      umount $MOUNT_POINT/$i
    done
  }

CHROOT RESEARCH NOTES

  mount -o bind /dev /mnt/mysys/dev
  mount -o bind /dev/pts /mnt/mysys/dev/pts
  mount -t sysfs /sys /mnt/mysys/sys
  mount -t proc /proc /mnt/mysys/proc
  chroot /mnt/mysys /bin/bash

  grub-install
  update-grub

  exit chroot, umount all, reboot || fix system with LiveOS as-in-the chroot

  rsnyc -aHKSrxv user@sh17system(192.168.0.42):/home/ /home/

WICKED FILE MANAGEMENT OBSERVATION WITHIN DIRECTORIES!! RESEARCH

  tree -CAhF --dirsfirst
  ├── [4.0K]  data/
  │   └── [4.0K]  global/
  │       └── [4.0K]  excel/
  │           ├── [ 74K]  armor.txt
  │           ├── [ 56K]  MagicPrefix.txt
  │           ├── [ 64K]  MagicSuffix.txt
  │           ├── [ 54K]  misc.txt
  │           ├── [ 20K]  Runes.txt
  │           ├── [ 86K]  TreasureClassEx.txt
  │           └── [115K]  weapons.txt
  ├── [100K]  All-Diablo2-patch-history.txt
  ├── [ 882]  CMod-README.txt
  ├── [267K]  d2s_save_example2_JSON_colored.txt
  ├── [147K]  d2s_save_example_JSON_colored.txt
  ├── [ 245]  diablo-2-rings-x5-mod-creator.pl
  └── [ 67K]  Necro-killed-by-sorc.mp3
  3 directories, 13 files

  tree -CAFd
  └── data
      └── global
          └── excel
  3 directories

PASTEBIN / FILE UPLOAD RESEARCH

  curl --data-binary @file.txt https://paste.rs/
  curl -F 'f:1=@file.ext' ix.io
  #'zippyshare' use this to download:
  #https://github.com/mansuf/zippyshare-downloader
  #TODO: how to upload? xD

CURL RESEARCH

  #outputs: 000
  curl --output /dev/null --silent --head --location 'http://people.oregonstate.edu/' -w '%{http_code}'

FUNNY

  #python3 C compiler: (lol)
  echo -e "#include <stdio.h>\nint main(void){puts(\"Ran from python3 BABY\");return 0;}" > C.c; python3 -c 'import os;os.system("gcc C.c && ./a.out")'



  Well isn't this a smart she-bang?
  #!/usr/bin/perl -e print qq/@ARGV/

USING FILENAMES TO OPEN YOUR WEB BROWSER RESEARCH

  debian-forum-open(){
    [ -z "$1" ] && return 55
    [ -f "$1" ] || return 56
    local filename="$(basename "$1")" #just kidding use:   "${1##*/}"  instead
    [[ $filename =~ ^[0-9]+\.txt$ ]] || return 57
    local topic_id="${filename%%.*}"
    echo x-www-browser "http://forums.debian.net/viewtopic.php?t=$topic_id" 
    x-www-browser "http://forums.debian.net/viewtopic.php?t=$topic_id" 
  }

URL FETCHING RESEARCH RESEARCH

  #take a list of a URLs in a text file line-by-line and put them into 001.txt .. 999.txt
  n=0
  # XXX: the '-r' switch is an assumption not an option
  while read -r myLine; do
    (( n++ ))
    wget_out_file=$(printf '%03d.txt' $n)
    echo "$wget_out_file $myLine" >> wget-MAP.txt
    echo "wget -O $wget_out_file '$myLine'" >> wget-TODO.sh
  done <<< "$(<novaks-LINKs.txt)"

SOUNDCARD IMPORTANT INFORMATION

  pactl list  | grep -iEA 4 'Name: alsa|Headphones|Speakers' | sed 's/^\s\+//; //d; /^--$/d'  #alsa --list-devices-output-input-monitors-stereo
Name: alsa_output.pci-0000_00_1f.3.analog-stereo
Description: Built-in Audio Analog Stereo
Driver: module-alsa-card.c
Sample Specification: s16le 2ch 48000Hz
Channel Map: front-left,front-right
analog-output-speaker: Speakers (type: Speaker, priority: 10000, availability unknown)
analog-output-headphones: Headphones (type: Headphones, priority: 9900, availability group: Legacy 2, availability unknown)
Active Port: analog-output-headphones
Formats:
pcm
Source #0
Name: alsa_output.pci-0000_00_1f.3.analog-stereo.monitor
Description: Monitor of Built-in Audio Analog Stereo
Driver: module-alsa-card.c
Sample Specification: s16le 2ch 48000Hz
Channel Map: front-left,front-right
Name: alsa_input.pci-0000_00_1f.3.analog-stereo
Description: Built-in Audio Analog Stereo
Driver: module-alsa-card.c
Sample Specification: s16le 2ch 44100Hz
Channel Map: front-left,front-right
Name: alsa_card.pci-0000_00_1f.3
Driver: module-alsa-card.c
Owner Module: 6
Properties:
alsa.card = "0"
analog-output-speaker: Speakers (type: Speaker, priority: 10000, latency offset: 0 usec, availability unknown)
Properties:
device.icon_name = "audio-speakers"
Part of profile(s): output:analog-stereo, output:analog-stereo+input:analog-stereo
analog-output-headphones: Headphones (type: Headphones, priority: 9900, latency offset: 0 usec, availability group: Legacy 2, availability unknown)
Properties:
device.icon_name = "audio-headphones"
Part of profile(s): output:analog-stereo, output:analog-stereo+input:analog-stereo
hdmi-output-0: HDMI / DisplayPort (type: HDMI, priority: 5900, latency offset: 0 usec, not available)
Properties:
device.icon_name = "video-display"

  pactl list sinks | egrep 'Name:|Headphones|Speakers|driver_name'  #alsa_output.pci analog-stereo names
    Name: alsa_output.pci-0000_00_1f.3.analog-stereo
      alsa.driver_name = "snd_hda_intel"
      analog-output-speaker: Speakers (type: Speaker, priority: 10000, availability unknown)
      analog-output-headphones: Headphones (type: Headphones, priority: 9900, availability group: Legacy 2, availability unknown)

  man pactl | fgrep sink | fgrep port
         set-sink-port SINK PORT
                Set the specified sink (identified by its symbolic name or numerical index) to the specified port (identified by its symbolic name).
                Set  the supported formats of the specified sink (identified by its numerical index) if supported by the sink. FORMATS is specified as a semi-colon (;)

  Sometimes when the soundcard stops playing sound..it's because you have Headphones (ie. the one of two available ports) plugged in,
    but for some reason pulse-audio switched the active port for your sink (ie. your soundcard output) to Speakers.

  So you need to toggle it:  pactl set-sink-port $SINK_NAME $PORT_NAME
  Or in this case:           pactl set-sink-port alsa_output.pci-0000_00_1f.3.analog-stereo analog-output-headphones
  (Or if that doesn't work): pactl set-sink-port alsa_output.pci-0000_00_1f.3.analog-stereo analog-output-speaker

ENCRYPTED FILESYSTEM WITHIN A FILE USED WITH A "LOOP DEVICE" TO MAINTAIN ITS INTEGRITY AS ENCRYPTED

  #setup
  head -c 100M /dev/zero > ~/Documents/shield.img
  sudo losetup /dev/loop4 ~/Documents/shield.img #TODO: 0.2%chance need to create a fresh/ready loop device: losetup --find
  sudo cryptsetup luksFormat /dev/loop4 ~/Documents/shield-passphrase-key-whatever.txt  #be 900%sure this shield-key.txt has no newline bullshhhh.
  sudo cryptsetup isLuks /dev/loop4 && echo yay
  #generates /dev/mapper/shield_map_name as a real cleared partition...
  sudo cryptsetup open --type luks /dev/loop4 shield_map_name --key-file ~/Documents/shield-key.txt  
  sudo mkfs.ext4 /dev/mapper/shield_map_name  #I'm 30%sure this will work..lol
  #OMFG this better work. We should get a /dev/mapper/shield_map_name1 ???????UGH MOTHER FUuuuuu
  #or wait it already was a partition...just cleared. huh I'm 3%sure anyways
  ls /dev/mapper/
  mkdir ~/Documents/shield_mapper_mount
  sudo mount -t ext4 /dev/mapper/shield_map_name ~/Documents/shield_mapper_mount
  sudo chmod g+rwx ~/Documents/shield_mapper_mount
  sudo chown :user ~/Documents/shield_mapper_mount
  touch ~/Documents/shield_mapper_mount/hello-world.txt
  file ~/Documents/shield_mapper_mount/hello-world.txt
  echo 'OK looks good. setup is done. time to get the fuuuuuu out.'
  sudo umount ~/Documents/shield_mapper_mount
  sudo cryptsetup close shield_map_name
  sudo losetup --detach /dev/loop4

  #now and forever
  sudo losetup /dev/loop4 ~/Documents/shield.img
  sudo cryptsetup isLuks /dev/loop4 && echo yay
  sudo cryptsetup open --type luks /dev/loop4 shield_map_name --key-file ~/Documents/shield-key.txt  
  sudo mount -t ext4 /dev/mapper/shield_map_name ~/Documents/shield_mapper_mount
  echo Time to do work now. Then we gtfo.
  sudo umount ~/Documents/shield_mapper_mount
  sudo cryptsetup close shield_map_name
  sudo losetup --detach /dev/loop4

DD RESEARCH
  
  oflags=sync,direct preferred rather than conv=sync

GNU USERLAND RESEARCH

  realpath ~/Documents/Github-repos #resolves even the softlink/symlink
  readlink ~/Documents              #resolves this specific symlink/true-path
  readlink .   #the true-path to the current PWD/CWD[?]

SECURE / LIGHTWEIGHT LINUX STUFF RESEARCH

  https://musl.libc.org/

BEST RECURSIVE GREP

  sudo grep -EIrni --extended-regex --binary-files=without-match --recursive --line-number --ignore-case 'libinput|synaptic' /var/log

USE `mpv` or `vlc` to watch a DVD directory

  mpv --start=01:00:00 --mute=yes VIDEO_TS/ #mute audio on, 1h in; play DVD [as directory]
  vlc VIDEO_TS/

USE `mpv` TO CONVERT A VIDEO STREAM MP4 WEBM [VIDEO FILE] INTO FRAME-BY-FRAME JPEG/JPG FILE "SCREENSHOT" OUTPUT

  Alt+s #to start/stop "recording" "converting" the video into images/jpegs/jpg-files #frame jpg [and therefore png] [alternate to ffmpeg]


CONCATENATE VIDEO STREAMS/FILES USING RAW VIDEO FILE CONTENTS WITH CAT WITH ffmpeg

#cat append catcanate add-to combine video 
ffmpeg -i video-only-video-file-mp4-avi_640x480_30FPS_yuv420p_pixelFormat.webm raw_file_extension_for_raw_output.yuv #YUV/RAW files are huge >120MiB 98% of the time
cat raw_file_extension_for_raw_output.yuv >> same_video_3_times.yuv
cat raw_file_extension_for_raw_output.yuv >> same_video_3_times.yuv
cat raw_file_extension_for_raw_output.yuv >> same_video_3_times.yuv
ffmpeg -s 640x480 -r 30 -i same_video_3_times.yum -q 1 MPEG4-video-only.avi  #-q 1 sets MPEG-4 video [codec] quality to 100% quality like JPEG/JPG



FFMPEG FOR ANDRIOD VIDEOS USING .MP4 VIDEO CODECS (ie libx265)

ffmpeg -i android_recorded_yuvj420pPixelFormat_1280x720_12Kvbitrate_30fps_h264_videoCodec_with_audioStream01.mp4 -pix_fmt yuv420p -q:v 7 -an -s 640x360 -r 24 -c:v libx265 3PercentOfOriginalFilesize_yuv420pPixelFormat_640x360_300Kvbitrate_24fps_h265_videoCodec_videoOnly.mp4


FFMPEG VIDEO CLIP 0 AUDIO ALL VIDEO OUTPUT

ffmpeg -i orig.mp4 -ss 50 -t $(( 126 - 50 )) -c:v copy -an clipped_all_video.mp4  #start video time seconds 50 seconds in, duration of 76 seconds with 0 audio (ie. audio stream removed audio stripped from video MPEG,WEBM,whatever). NOTE: the .mp4 video codec refers to h264 90% sure with a yuv420p pixel format

ADD MP3 TO VIDEO ONLY VIDEO FILE

ffmpeg -i all_video.mp4 -i $music/2104-plusplus.mp3 -c:v copy -loop 1 -shortest MusicVideo100.mp4 #all_video.mp4 was 1 minute while mp3 was 5 minutes, output video [ie. an AMV] is 1 minute. Audio codec will default to aac[/mp4a?]

ffmpeg -i all_video.webm -i $music/2104-plusplus.mp3 -c:v copy -loop 1 -shortest MusicVideo200.webm  #ie. AMV. assuming all_video is 1 minute and mp3 is 2 minutes the output video in-total is 1 minute. audio codec will default to libopus


FFMPEG SET FPS TO A NUMBER [RIGHT]

  ffmpeg -i 30fps.webm -r 24 24fps.webm #frames per second change in video file 

FFMPEG CLIP VIDEO FILE

start_time_minutes=3; start_time_seconds=11; ffmpeg 4min_video_only.webm -t 6 -ss $(( start_time_minutes * 60 + start_time_seconds )) -c copy clip_starting_at_311_going_total_time_6_seconds_video_only.webm #video clip; 3:11-3:17, starting at 3 minutes 11 seconds for 6 seconds total. video file clipping

FFMPEG RESIZE VIDEO

  ffmpeg -i 1920x1080_videoOnly.mp4 -s 854x480 -c:v vp9 854x480_videoOnly.webm #--resize-video resize video (+ change codec!)

FFMPEG CUSTOM AUDIO/MP3/WAV FOR VIDEO [MP4/[?]]WEBM [IE. MUSIC-VIDEO/AMV] VIDEO FROM YOUTUBE?

  #ffmpeg: strip audio from video.
  ffmpeg -i orig.webm -an -c:v copy custom_video002.webm #remove audio --remove-all-audio-from-video-file --delete-audio-stream delete audio
  #ffmpeg: add new [custom] audio/mp3 to video.
  ffmpeg -i custom_video002.webm -i custom_music001.mp3 -c:v copy custom_video003.webm

FFMPEG FIRST SECONDS/DURATION OF A VIDEO [OR AUDIO, RIGHT]

  ffmpeg -i whatever.webm -c:v copy -c:a copy -t 72 first_72_seconds_duration_time_start_beginning_of_whatever.webm
  #XXX: is -codec copy the same as -c:v copy -c:a copy ???
  #XXX: more generic command please

FFMPEG DUMP THE MP3 STRINGS/METADATA/ID3/TAGS FROM AN MP3 (AND PROBABLY ANYTHING ELSE [WHAT ELSE]) INTO A TEXT FILE

  ffmpeg -i whatever.mp3 -f ffmetadata all-tag-utf-8-whatever-string-data-I-guess-mp3-string-data.txt
  #ignore the error output it fing works.

  cat *string-data.txt
;UUUUUUHHHHHH MAGICAL WORDS HERE, RIGHT
album=http://localhost
artist=an_artists_name
album_artist=Remix Club SSshhh
comment=420 characters, Use uuuhhhh \n\r\\ for new uuuhhh lines I guess.\n\r\\
see newline\n\r\\
again I guess oh yeah and escape the semi-colons.like: \; that
composer=John Smith The Great
copyright=YourComputer LLC
genre=Retro
publisher=YourPublisher CO
title=John Smith The Great Presents "Something Song" YourPublisher CO
track=9999999999
date=2022
encoder=LibraryAudioStuff_104.0.5112.81


FFMPEG WAV Hz kHz (SAMPLE RATE) bits bits-per-second bps[????] YEAH AND TO MONO [FROM STEREO]!

  ffmpeg -i whatever.wav -ab  16 -ac 1 -ar 22050 special-version.wav
                              32     2     44100
                              48           48000
                             128

  #TODO: try:    sox whatever.wav -r 44100 44100Hz.wav
    #XXX Follow-up: would that make the sound sound better than ffmpeg [algorithms]?
  #TODO: what about 8u bits?
  #XXX: mp3 is in kbps versus bits-per-second wtf?

FFMPEG CLEAR THE MP3 STRINGS/METADATA/ID3/TAGS FROM AN MP3 (AND PROBABLY ANYTHING ELSE [WHAT ELSE])

  ffmpeg -i full-of-weird-information-stuff.mp3 -map_metadata 0:s:0 -codec copy cleared.mp3

  #IN OTHER WORDS:
  CLEAR_STRINGS_OPTIONS='-map_metadata 0:s:0'
  NO_VIDEO_OUT_OPTION='-vn'                       #optional of course
  ffmpeg -i full-of-weird-information-stuff.mp3 $CLEAR_STRINGS_OPTIONS $NO_VIDEO_OUT_OPTION -codec copy cleared.mp3

FFPROBE FFMPEG DETECT A VIDEO STREAM IN AN MP3 (OR HOPEFULLY WHATEVER I GUESS)

  ffprobe stupid_song.mp3 2>&1 | grep -E '^    Stream #0:1: Video' && echo has video...

  #so to fix this stuuuuuuuuu mp3 we turn it into a happy mp3 (ie. with audio only)
  CLEAR_STRINGS_OPTIONS='-map_metadata 0:s:0'     #optional of course
  NO_VIDEO_OUT_OPTION='-vn'
  ffmpeg -i stupid_song.mp3 $NO_VIDEO_OUT_OPTION $CLEAR_STRINGS_OPTIONS -codec copy good_song.mp3

FFMPEG STEREO TO MONO

  ffmpeg -i stereo.wav -map_channel 0.0.0 mono.wav

  #IN OTHER WORDS
  STEREO2MONO='-map_channel 0.0.0'
  ffmpeg -i stereo.wav $STEREO2MONO mono.wav

FFMPEG JPEG IMAGES [SERIES] INTO A WEBM VIDEO-FILE WITH AUDIO [WAV IN THIS CASE]

  ffmpeg -f image2 -framerate 60 -i 'mpv-shot%04d.jpg' -q 7 ~/Documents/temp/out300.avi; ffmpeg -i ~/Documents/temp/out300.avi -i $music/ogg-for-video-only-videos-as-audio/2_44.ogg -c:v copy -shortest -loop 0 ~/Documents/temp/out300-with-audio.avi #create Screenshots with mpv video player with Alt+s to start/stop recording <--BEST   for .webm videos the -c:v is vp9 (video codec) + -c:v is libopus (audio codec), framerate can be 26.4 for slower movies. framerate 0.4 for FlipPhoneCameraShot%04d.jpg -s 1200x1600 (optional), framerate 0.21 -s 1366x768 for Screenshot%04d.png works! framerate 0.81 for Diablo2/DiabloII ScreenshotAnimationVideoOut, default video codec is MPEG4

MP3 INTO A VIDEO WITH A STILL IMAGE (400x300)

  ffmpeg -loop 1 -i video-background.png -i Necro-killed-by-sorc.mp3 -shortest video.mp4

FFMPEG SLOW AUDIO BY A PERCENTAGE/%

  FFMPEG_SLOW_AUDIO_OPT='-filter:a atempo=0.86'
  ffmpeg -i $audio_file $FFMPEG_SLOW_AUDIO_OPT $new_audio_file_that_is_audio_file_slowed_to_86_percent_of_what_it_was

  #<EXAMPLE 001>
  mp3_file=hello.mp3
  percent=79
  [ -f "$mp3_file" ] && \
  ffmpeg -i "$mp3_file" -filter:a "atempo=0.$percent" "${mp3_file%%.mp3}_slowed_to_$percent_percent.ogg"
  #</EXAMPLE>


  #<EXAMPLE 002>
  ffmpeg -i track_11_pitch2.mp3 -filter:a 'atempo=0.86' track_11_pitch2_slowed.mp3
  #</EXAMPLE>

FFMPEG COMMAND SHHHHHH

  #400x285 image
  #Necro-killed-by-sorc.mp3: Audio file with ID3 version 2.4.0, contains:MPEG ADTS, layer III, v2,  56 kbps, 22.05 kHz, Monaural
  ffmpeg -loop 1 -i video-background.png -i Necro-killed-by-sorc.mp3 -shortest video.mp4

  #first one is PERFECT
  time ffmpeg -i female_duck_bathing_boyfriend_comes.mp4 -c:v vp9 -b:v 2.2k -c:a libopus out3.webm # -94.722% in filesize
  ffmpeg -i female_duck_bathing_boyfriend_comes.mp4 -s 640x360 -r 15 resized.mp4 #RESIZE VIDEO AND SET FPS (--fps -fps --frames-per-second=15 --resize-width-to=640px --resize-height-to=360px)

  #convert shhhhh to VCD on DVD. FIXME: is the audiobitrate 56K necessary? audio rate 22Khz necessary? video bitrate 500Kb/sec necessary? for VCD video bullshhhhh?
  ffmpeg -i whatever_video_file.avi -ab 56 -r 25 -ar 22050 -b 500 -s 352×240 VCD_video_01.mpg #XXX: researchme (look above)

BASH SECRETS
  
  #these ASCII characters are OK in bash without quotes (ie. single or double):
  echo hello++++++++++++%%%%%%%%%%%%%%%%%%%%

  #this is NOT cool
  echo hello???????????????????

MEGA GCC C COMPILING BUSSSHHH && LIBC SHHHH

  gcc -ggdb3 -Og -Wall -Wextra -Wpedantic sh17_code.c
  #NOTES:
  #-march=native I'm 99% sure is 0% good for putting your output "executable"
  #     on other machines.
  #-O0 strips about 3% debugging information from the output "executable"
  #-Ofast is standards-breaking compliancy-whatever

  #TODO: does it even fing matter what C specification I use? UGH bullshhhhhh.
  #      I'm 90% sure default is 93% good...right???RIGHT?!!!
  #could use -pedantic to enforce K&R standards????
  #-ansi:  c89 == c90 == ANSI/ISO C

  #good technique:
  #1) variable declarations @ beginning of function
  #2) initialize ALL variable declarations

  #to avoid buffer overflows and Segmentation Faults
  #look up:  address sanitation, asan, gcc asan, address sanitizer
  #(as software packages or gcc options [eg. -fsanitize=address])

  #fopen() && fseek()   the libc way
  #open() && lseek()    the POSIX/UNIX way
  #TODO: which one does Windows 10 use? (lol)

  #man 2 open read close chmod

  pinfo libc #brilliant. requires:   sudo apt install glibc-doc-reference 

INTERESTING BUT STUPID BASH BUSSHHHH

  timed_connect () { : > /dev/tcp/1.1.1.1/53 & local pid=$! ; (sleep 1 ; kill $pid) & wait $pid ; }

MATH GENIUS STUFF

  Huh. The Integral(From 0->INFI) of  e^(-x) * ln(x) dx   =   ~0.5772156649015328

GNU/LINUX+DEBIAN MALWARE/SECURITY NOTES

  sandboxed=locked-down=more-secure=process-protection=system-protection=application-protection=file-protection
  >so how do I sandbox?
  in wine you remove your E:\ or whatever.

  Always fix upstream URL project locations first so all distributions (that package the source code) benefit from the security changes.

  any binary file can be checked for possible malware-shhhh:
    chkrootkit, rkhunter
    #lesser so:
    binwalk (detect + extract binary magicalized data in an ISO for example)
    string (duh)
    exiftool (duh)

  any binary/jpeg/png/mp3/ogg can hide inforomation with "steganography"
    (sounds 96%rare tho lmao)
    foremost, stegcracker, stegosuite
    +research: 'histogram analysis' and 'steganalysis'
  You can report those findings to debian-security@lists.debian.org
    (like hidden data within those files that are sus)

  jpeg/png can be tested with 'fuzzing'

  Protecting yourself while testing for potential malware information collection:
  Use a 'MAC" + max tight sandbox (limit network access + make $HOME read-only) + minimal/light image-viewer (eg. feh, sxiv)
    + rebind 'image' to read-only + 3%sure use 'sway' + disable dbus +
    bwrap sandbox + kernel protection somehow + could try a VM +
    avoid sandbox escape

  I'm 3%sure ClamAV+extensions[?] would help. I'm 2%sure ClamAV would need a >0%sandbox.
    
BASH SHHHHH

  #egrep a variable.hehe
  #DANGER: I really don't know if :alpha: and :alnum: cover MORE than a-zA-Z and a-zA-Z0-9 respectively
  x=ABC_1; LC_ALL=C; [[ $x =~ [[:alpha:]_]+[[:alnum:]_] ]] && printf '%s\n' "$x"; unset LC_ALL

MOAR BASH SHHHH F

  while IFS= read -r -d '' file; do something "$file"; done < <(find /foo -print0)

BASH GENIUS MAN PAGE LOOK-UP

  man bash | grep -F -A 2 -B 2 '&>'

DEBIAN RECEIVE / SEND MAIL FROM GMAIL VIA POP3 (RECEIVE) AND SMTP (SEND) RESEARCH

  sudo apt install mpop msmtp #and good fin' luck

DATE-BASED CHARACTER SEQUENCES TO SHOW DATE/DATETIME INFORMATION LIKE MINUTES SECONDS DAY OF MONTH 12HOUR 24HOUR AMPM NAME OF MONTH YEAR IN LIKE THREE FORMATS

  man strftime | grep -F -A 111 'ordinary character sequences'
  man date | grep -F -A 111 'Interpreted sequences are:'
  #TODO: now do printf lol

WHAT A GOOD COPYRIGHT NOTICE EXAMPLE

  Copyright (c) user95f85f

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.

COLOR/COLOUR MASSIVE PARALLEL BASH SCRIPT EXECUTING BULLSSSHHH PLUS LOCAL MULTI-LINED VARIABLE DECLARATION

  ###FU TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  #gotta replace 'echo -n' and 'echo -e' and 'echo -ne' and 'echo -en' with printf SSSHHHHH
  #</TODO>
  red=$(tput setaf 1) #notice: no double quotes! Huh. Must be a simple variable declaration.
  reset=$(tput sgr0)
  printf '4' > jobs_proc_file.txt
  cat <<EOF454545 > .links
https://google.com
https://facebook.com
https://twitter.com
EOF454545

  do_parallel(){
    local total=100 DL='echo -n wget'
    cat .links | parallel -j "$2" --jobs "$2" "echo -ne \"\\r\"; echo -n \"Jobs: ${red}${2}${reset}; Link: ${red}${1}${reset}; {#}/$total \"; $DL {}; echo -n '          '"
  }

  do_parallel something-special-here jobs_proc_file.txt
  echo #a basic newline at the end of the program

SUPER SYSTEM SUSTAIN/BACKUP

  rsync -aAXHSv /* /path/to/shared/folder \
    --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found,/home/*/.gvfs}

GET TCPDUMP TO TELL ME THE DOMAIN-DNS REQUESTS SEND TO MY MODEM ISP/DNS-PROVIDER-SERVER

  sudo tcpdump -i any -U 'src port 53 or dst port 53' > ~/tcpdump.log
  tail -f ~/tcpdump.log #and hit 'F' to watch

  tail -f out.dat | grep --line-buffered -E 'my\.jetpack\.domain.* (A\?|AAAA\?|CNAME) ' | cut --characters=24-

FASTER GZIP ALTERNATIVE  RESEARCH

  apt install lzop #a faster compression solution VS gzip for streams:
  echo whatever | lzop > what.lz
  cat what.lz | lzop -d #should get 'whatever' as output

MASTERFUL TECH/CODING/SOURCE-CODE STUFF RESEARCH

  goog SHA1 site:geekflare.com
  goog SHA1 collision site:github.com

SWAP ESCAPE/ESC KEY AND CAPS LOCK TO MAKE IT EASIER TO USE VIM WHILE IN X11

  # this doesn't work while in a tty/virtual-console (even while .. lightdm for example.. is running)
  DISPLAY=:0.0 setxkbmap -option caps:swapescape
  # this does iff you're in a Desktop Environment (eg. XFCE or KDE)
  setxkbmap -option caps:swapescape

IRC BOT RESEARCH

  github search: limnoria
  It's in python3 I guess

BASHRC ALIAS/"FUNCTION" TO QUICKLY SEARCH THE WEB VIA A TTY/VIRTUAL-CONSOLE/TERMINAL "WEB BROWSER"/ONLINE-HTML-VIEWER

  goog(){ local s="$*"; links "https://google.com/search?q=${s// /+}"; }

DOWNLOAD URLs INTO .TXT FILES INTO PWD

  url_list=(
http://google.com
http://yahoo.com
  )

  n=1
  while [ -f "$(printf '%03d.txt' $n)" ]; do (( n++ )); done
  for u in "${url_list[@]}"; do
    (( n++ ))
    output_document="$(printf '%03d.txt' $n)"
    echo wget --tries=1 --timeout=8 "--output-document=$output_document" -- "$u" >> wget.log
    wget --tries=1 --timeout=8 "--output-document=$output_document" -- "$u" 
  done

  #<ALTERNATIVE FROM URL-LIST.TXT INSTEAD OF FROM AN ARRAY "LIST"
  # (ie. an "array" which is technically 0.3% right because it's a literal LIST
  #   before the bash interpreter turns into an a
  #   blah-blah-blah-array-data-structure-stfu) EMBEDDED IN YOUR BASH SCRIPT>

  URL_LIST_TXT=~/Downloads/url-list.txt
  [ -f "$URL_LIST_TXT" ] || exit 30
  mkdir -p ~/Downloads/downloaded-urls-todo-readme && cd ~/Downloads/downloaded-urls-todo-readme
  n=1
  while [ -f "$(printf '%03d.txt' $n)" ]; do (( n++ )); done
  # XXX: the '-r' switch is an assumption not an option
  while read -r u; do
    (( n++ ))
    output_document="$(printf '%03d.txt' $n)"
    echo wget --tries=1 --timeout=8 "--output-document=$output_document" -- "$u" >> wget.log
    wget --tries=1 --timeout=8 "--output-document=$output_document" -- "$u"
  done <<<$(cat "$URL_LIST_TXT")


DOES YOUR PYTHON3 NEED SOME BRACKETS IN ITS SOURCE CODE?

  #!/usr/bin/perl
  #          save this program/script/whatever as: /usr/local/bin/python4
  # put this on top of your "93%" python3 scripts: #!/usr/local/bin/python4
  #
  #_____# you can now do something like this:
  #     if 1 == 1:
  #     {
  #       print("Hmmm")
  #     }
  #
  #     #`python3` will execute the (brackets) filtered-out in a "filtered-out [output] file"
  #     #NOTE: line-numbers for error message output of `python3` is preserved.
  #

  if(@ARGV == 0){exit 1;}
  #print 'python4 script: ', $ARGV[0];
  my $python4_script = $ARGV[0];

  my $python3_script = $python4_script;
  $python3_script =~ s/(.*)\.py/$1.py.py/ or exit 2;

  open my $FH, "<$python4_script" or die $!;
  open my $FH2, ">$python3_script" or die $!;
  while(<$FH>){
    my $line = $_;
    $line =~ s/^[{}]$//;
    printf $FH2 "%s", $line;
  }

  close $FH;
  close $FH2; 
  my @args = (@ARGV);
  shift @args;
  for(@args){s#'#'\\''#g;s/^/'/;s/$/'/;}
  my $args = join ' ', @args;
  @args = ();
  system("python3 $python3_script $args");

RESEARCH PYTHON3 MANAGING DATA/COLUMNS WITHIN A CSV FILE WITH pandas PYTHON3 MODULE

  > Depends: python3-numpy (>= 1:1.15~)
  > Description-en: data structures for "relational" or "labeled" data
  >  pandas is a Python package providing fast, flexible, and expressive
  >  data structures designed to make working with "relational" or
  >  "labeled" data both easy and intuitive. It aims to be the fundamental
  > Homepage: https://pandas.pydata.org/

  #this code is sshhhhh but it expresses something 93% interesting
  files_list = glob.glob('*.txt')
  main_df = pandas.read_csv(files_list[0], sep='\n', header=None)[0].str.cat()
  for i in range(0, len(files_list)):
  {
    text = pandas.read_csv(files_list[i], sep='\n', header=None)[0].str.cat()
    df = pandas.DataFrame([text], columns=['note'])
    main_df = pandas.concat([main_df, df], axis=0)
  }

GREP ALTERNATIVE: "DOES THIS FILE HAVE THIS FING STRING?"

  #78% good
  if grep $keyword $filename >/dev/null; then
    echo matched.
  fi
  #blah:
  if grep -q $keyword $filename; then
    echo matched.
  fi

CRAAaAAA USERAGENTS FOR YOUR CURL AND WGET BUSSSHHHHHH

  curl --user-agent $this $other_options
  wget --user-agent=$this $other_options

  #the first one is super old (lol)
  Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0
  Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36
  Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0
  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Safari/605.1.15
  Mozilla/5.0 (X11; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/99.0
  Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36
  Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36 Edg/100.0.1185.50
  Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.111 Mobile Safari/537.36
  Mozilla/5.0 (Android 10; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0
  Mozilla/5.0 (iPhone; CPU iPhone OS 13_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1
  Mozilla/5.0 (iPhone; CPU iPhone OS 13_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/83.0.4147.71 Mobile/15E148 Safari/604.1
  Mozilla/5.0 (iPhone; CPU iPhone OS 13_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/28.0 Mobile/15E148 Safari/605.1.15



BASIC PYTHON3 SCRIPT EXECUTABLE PROGRAM

  #!/usr/bin/python3
  import sys
  import time
  import os
  def main():
  {
    WAIT_SECONDS = 1.2223
    name = os.getlogin()
    s = input('\n\nReady %s? (Y/n) ' % name)
    name = None
    if s.lower() not in ['', 'y']:
      return
    print('please wait %f seconds' % WAIT_SECONDS)
    time.sleep(WAIT_SECONDS) #in seconds
    print('Here is the arguments you gave this program:')
    print(sys.argv)
  }
  if __name__ == '__main__':
    main() 

PYTHON3 WRITE TO AN OPENED PROCESS STDIN

  import os
  def main():
  {
    p = os.popen('/bin/cat', 'w')
    p.write("To: receiver@example.com\n")
    p.write("Subject: test\n")
    p.write("\n")
    p.write("Some text\n")
    p.write("some more text\n")
    ret = p.close()
    if ret != 0:
      print("Your `cat` process 0% worked out I guess:", sts)
  }
  if __name__ == '__main__':
    main() 

PYTHON3 SOMEBODY IS ENDING MY SCRIPT PRE-MATURELY

  import math
  import signal
  import sys
  import time
  UserIsHittingCTRLC(signal, None):
    print('SIGTERM caught.', signal)
    sys.exit(42)
  if __name__ == '__main__':
    signal.signal(signal.SIGINT, UserIsHittingCTRLC)
    time.sleep(math.pi)

PYTHON3 FLASK RESEARCH

  run with apache2 server or gunicorn

VIDEO TO GIF ANIMATION

  #start at 12 seconds, clip 5 seconds total, use FPS of 5 frames per second
  #use 200 pixel width (30% sure)
  ffmpeg -i whatever.avi -ss 12 -t 5 -filter_complex "[0:v] fps="5",scale="200":-1" "whatever.gif"

270 CHARACTER LINUX FILESYSTEM FILENAME

  #OH YEAHHHHHHHH (tmpfs [ie. RAM/liveOS/overlay mount/filesystem] & ext4)
  mkdir ~/does_not_exist && cd ~/does_not_exist && { touch $(printf '%s' {1..119}).txt; printf '%s' *.txt; printf '%s' *.txt | wc -c ; } #270
  #123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119.txt

CREATE A FILE IN A PRE-DETERMINED FILESIZE (THAT IS MOST LIKELY GONNA BE ZEROED OUT)

  #XXX I'm 96% sure a 1024 byte file is a 1 KiB file
  #and then a 1000 byte file is a KB (ie. 'kilo', which means 1000 of something, which in this case is bytes) file
  HOW_BIG_DO_YOU_WANT_THE_FILE_IN_BYTES=1024; printf '%x: 00\n' $(( $HOW_BIG_DO_YOU_WANT_THE_FILE_IN_BYTES - 1 )) | xxd -r > one_KiB_file.txt

ANDROID EXECUTE SHELL COMMANDS VIA USB CONNECTION RESEARCH

  1) enable USB debugging in Developer Options
  2) sudo apt install adb
  3) adb shell <<<"echo hello; exit" | sed 's/hello/sup/' > output_from_android_phone.txt

OPENING A COMMAND'S OUTPUT AS A TEMPORARY FILE (DESCRIPTOR) IN BASH

  vim <(zcat SERVICES.TXT.gz) SYNC.TXT 

CHECKSUMS FOR GNU/LINUX REPORT WHAT THEY ARE

  #256, 384, 512 is 71% good
  #using multiple is 21% good (especially if your target system only has md5sum like 7zip Windows ie. 30% sure)
  echo whatever > /tmp/zzz.txt; for i in md5sum sha1sum sha256sum sha384sum sha512sum; do printf '%6s: ' "${i%%sum}"; $i /tmp/zzz.txt | awk '{printf "(%3d) %s\n", length($1), $1}'; done; rm /tmp/zzz.txt

     md5: ( 32) d8d77109f4a24efc3bd53d7cabb7ee35
    sha1: ( 40) 52e98718f012ca15f876ae405b57848b5c7128dd
  sha256: ( 64) cd293be6cea034bd45a0352775a219ef5dc7825ce55d1f7dae9762d80ce64411
  sha384: ( 96) 5c434c63c8098e5e05e61f5839fd08f8ccd58d6f757cc96e0f45571445c28f08fc5f7189ccf40211f3fae40a81bb9fbb
  sha512: (128) 663fad5bcd324358db08bc078aba90177f7854b26b38fa06f9a1f454ec7001ee8daf46cb52ab0eb776bc747cdc4fe6ad8a3b3124fbe0a39c4e1e8ed01f6b6e9a




PERFECT MATH IN PERL 5

  #!/usr/bin/perl

  use warnings;
  use strict;
  my $eval_this = q/


0 + 0 * (-1) - ( -0 + ( 0 * -0 + (-1) * ( (-1) * (-1) * 0 + 0 ) ) )


  /;
  print( eval($eval_this), "\n" ); #0


VARIOUS MEATS AND FOODS

  turkey, chicken, cow (beef), pig (pork)
  VS
  goat, sheep, kavurma, succuk

  chamomile tea, mint tea
  VS
  jasmine tea

BASH REDIRECT EVERYTHING (ie. STDOUT AND STDERR) TO A FILE

  $command > "$stderr_and_stdout_output_text_file" 2>&1

  #For example:
  pydoc -k print > p.txt 2>&1

CONVERT MOON PHASE [0, 28] TO MOON PERCENTAGE [0%, 100%] IN PYTHON3

  #!/usr/bin/python3

  import random

  if __name__ == '__main__':
    ITERATIONS = 20
    #pre-notes:     0-14   0%-100%   14-28    100%-0%
    for _ in range(0,ITERATIONS):
      _ = None
      moon_phase = random.uniform(0, 28)      
      print('%-38s' % ('{}{} units'.format('moon_phase=', moon_phase)), end='')
      if moon_phase > 14.00000000:
        pre_moon_percent2 = moon_phase - 14.0
        super_accurate_almost_moon_percent = 1.0 - ( (28.0 - 14.0 - pre_moon_percent2) / (28.0 - 14.0))
        pre_moon_percent2 = None
      else:
        super_accurate_almost_moon_percent = moon_phase / 14.0
      moon_phase = None

      print('{}{}'.format('moon_percent=', '%0.2f%%' % (super_accurate_almost_moon_percent * 100.0)))
      super_accurate_almost_moon_percent = None

"""
#sample output:

moon_phase=0.4931260130136699 units   moon_percent=3.52%
moon_phase=0.8105894455562064 units   moon_percent=5.79%
moon_phase=4.183471367016093 units    moon_percent=29.88%
moon_phase=4.302431703836977 units    moon_percent=30.73%
moon_phase=4.863611820742577 units    moon_percent=34.74%
moon_phase=5.5480365331742405 units   moon_percent=39.63%
moon_phase=5.992918731701295 units    moon_percent=42.81%
moon_phase=6.6982896574532615 units   moon_percent=47.84%
moon_phase=7.1949990059006295 units   moon_percent=51.39%
moon_phase=9.395560540636705 units    moon_percent=67.11%
moon_phase=12.417777865338428 units   moon_percent=88.70%
moon_phase=12.762129317228336 units   moon_percent=91.16%
moon_phase=13.72199284155047 units    moon_percent=98.01%
moon_phase=20.32376105689604 units    moon_percent=45.17%
moon_phase=20.921416577195036 units   moon_percent=49.44%
moon_phase=21.152651177010114 units   moon_percent=51.09%
moon_phase=23.167365278262395 units   moon_percent=65.48%
moon_phase=23.676596602027843 units   moon_percent=69.12%
moon_phase=23.98537665556813 units    moon_percent=71.32%
moon_phase=27.821417224659932 units   moon_percent=98.72%

"""


USE PYTHON3 ASTRAL LIBRARY/MODULE/SCRIPT/WHATEVER TO GET THE MOON PHASE FOR WHERE YOU LIVE (USES GOOGLE DATA-SERVERS EEK)

  sudo apt install python3-astral #depends on:  python3-requests python3-tz
  mkdir ~/Downloads/get-moon-phase-py3/
  cd ~/Downloads/get-moon-phase-py3
  cp /usr/lib/python3/dist-packages/astral.py .
  #I'm 3% sure this will work
  cat <<EOFTTT >> astral.py 

import sys
a = Astral()
location = a[sys.argv[1]]
#pre-notes:     0-14   0%-100%   14-28    100%-0%
moon_phase = location.moon_phase(None, float)
print('The moon phase for location {} is {}'.format(sys.argv[1], moon_phase)

EOFTTT
  python3 astral.py 'Chisinau,Moldova' #location can be grepped from astral.py as some city near you (it's the 1st argument 90% sure 90%sure needs the slash tho
  #The moon phase for location Chisinau,Moldova is 11.466777777777779


UTF-8/UTF-16[?] CODE TO STRING OUTPUT IN BASH, FOR EXAMPLE

  printf '%s\n' $'\u2015'   #horizontal bar
  printf '%s\n' $'\u2019'; echo "'"; echo '`' #99% similar

printf '#/me sings as jackson: "123, to hex is 7b with bash is printf '\''\\u7b'\'', which is \u7b, I said \u7b\u7b\u7b\u7b\u7b\u7b\u7b\u7b, which is utf as as keeeeeeeeeeey that is right I said asciiiiiiiiiiiiheeeheeeeeeeeeeeeee, but ya gotta balance that with }}}, can someone heeeeeeeelp mememeheeeeeeee? \u7c 7c \u7d 7d!!!! \u7d\u7d\u7d\u7d\u7d "\n\n' #bash utf8 utf-8 as ascii to stdout after      printf %x 123; echo; #to get 7b value
#/me sings as jackson: "123, to hex is 7b with bash is printf '\u7b', which is {, I said {{{{{{{{, which is utf as as keeeeeeeeeeey that is right I said asciiiiiiiiiiiiheeeheeeeeeeeeeeeee, but ya gotta balance that with }}}, can someone heeeeeeeelp mememeheeeeeeee? | 7c } 7d!!!! }}}}} "

HEXDUMP ASCII CODES INTO PYTHON3 INT64 LIST

  printf %s internet | hd | cut --characters=11-40 | perl -ne 'chomp;print "internet = ("; @a=split / /;for(@a){$_=oct("0x".$_);}print(join(", ", @a), "\n");print "); internet=list(internet); print(type(internet));print(repr(internet))"; exit(0);' > internet.txt; python3 internet.txt  #hd=hexdump

UTF-8 BINARY DATA TO HOPEFULLY UTF-8 CHARACTER RESEARCH

  #printf '00000000' | xxd -revert -plain | hexdump
  #0000000 0000 0000                              
  #0000004
  #printf '00000000' | xxd -revert -plain | hexdump -C
  #00000000  00 00 00 00                                       |....|
  #00000004

  #FIXME: get something like this working NOWWWWWWWWWWWWW
  #printf '00000000' | xxd -revert -plain #somehow get pretty UTF-8 output here You FU*


ALTERNATIVE TO `strace` FOR DETECTING WHAT A PROGRAM IS DOING, ACTUALLY IN THIS CASE IT'S WHY CPU IS 100% RESEARCH

  perf record -g $command
  perf report -g

VIM FOR WHEN VIEWING LOGS TO AUTO-UPDATE AND CAN'T WRITE TO THEM

  :se autoread readonly

OUTPUT YOUR NEWLINED-SEGREGATED OUTPUT INTO A NICE TABLE TABULAR OUTPUT IN BASH ON YOUR TTY/VIRTUAL-TERMINAL YAAAAAAY

  printf '%s ' {1..200} | column --output-width "$(tput cols)"

  #REAL EXAMPLE:

  # both of these do the exact same thing:
  python3 -c "import os;print('\n'.join([f for f in os.listdir('/usr/bin') if os.path.islink('/usr/bin/{}'.format(f))]), end='')" | column --output-width "$(tput cols)"
  { for i in /usr/bin/*; do [ -L "$i" ] && printf '%s\n' "${i##*/}"; done ; } | column --output-width "$(tput cols)"



CONVERT ALL 3-BEGINNING-SPACES TO TABS AND THEN CONVERT THE TABS TO 2 SPACES
  
  | unexpand --first-only --tabs=3 | expand --tabs=2


DELETE ALL NEWLINES INCOMING FROM A BASH COMMAND'S STDOUT

  | tr --delete '\n'


DELETE ALL NON-PRINTABLE CHARACTERS (SPACES ARE PRINTABLE) FROM A BASHS' COMMANDS' STDOUT

  | tr --delete --complement '[:print:]'

BASH DEBUGGING / TROUBLESHOOTING

  bash -n myscript.sh #check for syntax errors. don't execute/run.
  # add:   set -x   to the top of your script show all commands executed are printed to STDOUT[?]

GUI BASH MESSAGE BOXES RESEARCH

  xmessage || zenity || ssft #apt -s install ssft

GETTING THE SIZES OF FILES IN PWD

  ls -laS

GETTING THE SIZES OF SUB DIRECTORIES WITHIN PWD

  du -h | sort -h

WHERE TO PUT ALL YOUR PERSONAL PROGRAM'S TMP/TEMP FILES, CACHE FILES, AND CONFIGURATION OF YOUR PROGRAMS (I'M 7% SURE!!!!!!!!!!!!!!!!!!!)

  #is the best place to put your personal-program's cache, configuration, log files, and tmp/temporary-files-folders-directories?
  mkdir -pv /run/$USER/$UID/everything/{cache,etc,log,tmp}

  #nope. Put your personal-program's configuration in /etc/*
  #      Put your tmp sshhhh in /tmp/*
  #      Put your cache in ~/.cache/program00001/ (38% sure)
  #      Put your log files in /var/log/* (38% sure)

HOW SHOULD I EDIT MY SCREENSHOT0001.jpg  ?

  krita || shotwell || darktable || gimp

WHERE CAN I DOWNLOAD WIKIS INTO MY COMPUTARZ?

  kiwix

WGET GET ME ONLY HTML FILES, IGNORE robots.txt WITHOUT DOWNLOADING THE WHOLE WEBSITE

  wget --accept '*.html' -e robots=off --relative --mirror $URL

  #for example:
  wget --mirror -e robots=off --relative --accept '*.html' https://download.kiwix.org/zim/

A FUN WAY TO LOOK AT A MANUAL PAGE (98% SURE INFO TOO) BY LOOKING ONLY AT ITS AVAILABLE OPTIONS/OPTION-ARGUMENTS

  man gpg | wc -l #2330 oh shit
  #that's better:
  man gpg | grep -F ' -' | less

FUING PYTHON 3

  # DANGER python3 programmers DANGER
  perl5:   $n=2;$n = 2 & $n > 0; #0
  C:       n=2;n = 2 & n > 0; /* 0 */
  python3: n=2;n = 2 & n > 0 #True

FUNNY (PUT THIS AT THE TOP OF ALL OF YOUR SHELL SCRIPTS [THAT MAY TURN NON-POSIX WITHIN 20 DAYS]) (F ZSH)

  #!/usr/bin/env bash
  [[ $(</etc/issue.net) == 'Debian GNU/Linux 11' ]] || { exit 255; }
  . /etc/os-release; [[ $NAME == 'Arch Linux' ]] || { exit 255; }

BASH: WHAT THE F IS HAPPENING

  perl -e 'warn "stderr 1\nstderr 2\n";print "stdout 1\nstdout 2\n"' > >(sed 's/^/from perl: /') 3>&1 2> >(perl -ne 'print "ERROR line: $_"' >&3);
#from perl: stdout 1
#from perl: stdout 2
#from perl: ERROR line: stderr 1
#from perl: ERROR line: stderr 2

BASH: ARE WE RUNNING AS root?

  #bash -c '[ $EUID -eq 0 -a $HOME = "/root" ] && echo we must be root'
  #sudo -E bash -c '[ $EUID -eq 0 -a $HOME = "/root" ] && echo we must be root'
  sudo bash -c '[ $EUID -eq 0 -a $HOME = "/root" ] && echo we must be root'   #<-- FOR REAL
  #TODO: what if EUID is empty in the `test`?
  #TODO: what if EUID is a non-number non-empty? Does the test fail silently and we're good? Or does the shell script become a syntax error and the whole script goes down in flames?

ALLOW A USER ON YOUR GNU/LINUX OS TO USE SUDO FOR EVERYTHING LIKE A SUPER HERO

  usermod --append --groups sudo $USER
  #OR:
  printf '\n\n%s\n\n' "$USER ALL=(ALL:ALL) NOPASSWD: ALL" | sudo tee --append /etc/sudoers

BASH PRO-TIP (FUNNY)

  #Use these variables as your go-to variables to use interactively in your shell command-line when needing a variable name or a for loop variable name
  $BASH $BASHOPTS $HOSTNAME $UID $BASH_VERSION $LINES $OSTYPE

GRUB CONFIG STUFF LIKE vmlinuz OPTIONS

  <FINAL ANSWER>
<!--
  @
  /media/xubuntu/MYDEB_BOOT/boot/grub/grub.cfg
  line 32

  NOTES:
  boot=live components              was already there
  pcei_aspm=off                     was added because surely it was needed for 900% my hardware (90% sure)
  quiet                             was removed
  splash                            was replaced with                     nosplash
  systemd.unit=multi-user.target    was added because 100% default (ie. default.target) was too much default (ie. i needed VT/tty)
  timezone=America/Los_Angeles      was added because surely it's better than the default UTC+0-0, right? TODO: do I still need to dpkg-reconfigure tzdata ? 0% yes
  toram                             was added
-->
  linux  /live/vmlinuz-5.10.0-13-amd64 boot=live components nosplash toram pcie_aspm=off timezone=America/Los_Angeles systemd.unit=multi-user.target "${loopback}"
  </FINAL ANSWER>

  BLOOPERS:
  hostname=whatever was 100% ignored by the LiveISO whatever (XXX: what about live-hostname=whatever    0.2% yes)
  user-fullname="Debian Live user"  was 50% passively replaced with       user-fullname="LiveLinux Station" (this is a 9 [that is whoagood])
  0% changes the fing user fullname bull well what the f

  NOTES AND BLAH BLAH BLAH:
  #nocomponents="xscreensaver" means disable-xscreensaver-locking-screen-for-lightdm 3% chance this will work
  nocomponents="xscreensaver" nosplash quiet systemd.unit=multi-user.target timezone=US/Pacific toram user-fullname="Live Debian user" user-fullname="LiveLinux Station"
  #why user-fullname="" twice? I'm 98% sure the last one (ie. "LiveLinux Station") overwrites the a priori one.
  #get the timezone list from
  find -mindepth 1 /usr/share/zoneinfo/ | less

FIX [GNU/LINUX] DEBIAN OS DATETIME/TIME/[TIMEZONE]/NON-UTC+0/WHATEVER[GMT+0?????????????????????????????????????????????????] (INCLUDING FOR DISPLAY-MANAGER/DESKTOP-ENVIRONMENT!)

  sudo dpkg-reconfigure tzdata

ULTIMATE VARIABLE DNE (ie. DOES NOT EXIST) ERROR/BAIL_THE_ENTIRE_BASH_SESSION (lol)
  
  #this function embedded into the bash interactive shell command-line and ran you will basically exit out of the entire shell..
  #this function in .bashrc and called you basically exit out of the entire shell. (same)
  tryme(){ echo going; echo ${var3:?}; echo going; } ; tryme; echo blank:  $var2;echo ${var2:?}; echo hello
  #blank:
  #going
  #NEVER ever happens:
  #going
  #hello

USING SED TO HIGHLIGHT STDIN WITH COLOR

  cat highlight-a-string-through-pipe.sh
  #!/bin/sh
  sed "s/\($1\)/\x1b[31m\\1\x1b[39m/g"

DASH/SH SHELL (SCRIPT[?]) COMPARISON WITHOUT A '[[' ``test'' AT-ALL?

  #!/usr/bin/dash

  does_exist=1
  does_exist2=22
  [ $does_exist -ne 0 -a $does_exist2 -ne 1 ] && echo okay1         #GOOD
  [ "$does_exist" -ne 0 -a "$does_exist2" -ne 1 ] && echo okay2     #GOOD
  [ $does_exist != aaaa -a $does_exist2 != bbbb ] && echo okay3     #GOOD
  [ $does_exist != 'aaaa' -a $does_exist2 != 'bbbb' ] && echo okay4 #GOOD

  exit 0


  #./dash.sh: 14: [: Illegal number: 
  [ "$dne1" -ne 0 -a "$dne2" -ne 1 ] && echo okay5


  exit 0

  #./dash.sh: 7: [: Illegal number: aaaa
  does_exist2=aaaa
  [ $does_exist -ne 0 -a $does_exist2 -ne 1 ] && echo okay1

  exit 0

  does_exist=1

  #./dash.sh: 5: [: -ne: unexpected operator
  [ $does_exist -ne 0 -a $dne -ne 1 ] && echo okay1

  #./dash.sh: 7: [: =: unexpected operator
  [ $does_exist != aaaa -a $dne = bbbb ] && echo okay2

  #./dash.sh: 9: [[: not found
  [[ $does_exist != aaaa && $dne -ne 0 ]] && echo okay3


  exit 0

  #[: -ne: unexpected operator
  [ $dne -ne 0 -a $dne2 -ne 1 ] && echo okay1

  #[: !=: unexpected operator
  [ $dne != aaaa -a $dne2 = bbbb ] && echo okay2

  #[[: not found
  [[ $dne != aaaa && $dne2 -ne 0 ]] && echo okay3

DETECT CHANGES IN /var/log/* AND $HOME IN FILES AS EASILY AS POSSIBLE

  # XXX: the '-r' switch is an assumption not an option
  touch ~/ref.txt; while :; do read -r -p 'press ENTER to see changed files'; clear; sudo find /var/log $HOME -type f -newer ~/ref.txt; done

LINT AND PROGRAMMING ONE-LINERS/INLINERS:  bash -c 'echo hi'; perl -e 'print "hi\n"'; php -r 'echo "hi\n"'; python -c 'print("hi")' #run scripts programs inline in one line  #check syntax; lint script utf8/utf-8 text file before running: bash -n lint_this.sh; perl -c lint_this.pl; php --syntax-check -l lint_this.php
  
BASH LENGTH OF STRING VS LENGTH OF ARRAY

  str='this should be about 48 characters long'; strlen=${#str} #48; bash5; length of string; strlen() #php7; length() #perl5; len() #python3; character_count(); #altLinguish; count(split //, $str); #altLinguish UTF8/UTF-8 character count; function; subroutine; built-in

  ar=('1 1', '2 2', '3 3 3'); ar_count=${#ar[@]}   # 3 count() function, array, list, arraylist, length(); len(); size(); array_size(); FIXME: what about without quotes? what about without quotes set to another variable? is that 100% safe?

WHAT IS A DVD?

  720x480
  29.970030 frames per second
  audio = 48000 Hz
  video bitrate = ???
  audio birtate = ???

WEB BROWSERS TO USE

  apt -s install epiphany-browser #OR:
  apt -s install midori #OR:
  apt -s install surf

DOES ``xfconf-query'' COMMAND WORK EVEN WHEN THE DISPLAY-MANAGER/DESKTOP-ENVIRONMENT IS OFF?

  9,000,000% yes
  
XFCE4 CHANGE WALLPAPER??????

  xfconf-query --monitor -c xfce4-desktop
  #/backdrop/single-workspace-mode /backdrop/screen0/monitoreDP-1/workspace0/last-image
  #                                /backdrop/screen0/monitoreDP-1/workspace1/last-image
  #                                /backdrop/screen0/monitoreDP-1/workspace2/last-image
  #                                /backdrop/screen0/monitoreDP-1/workspace3/last-image
  xfconf-query -p /backdrop/screen0/monitoreDP-1/workspace0/last-image -c xfce4-desktop
  #/home/myusername/1.png
  xfconf-query -p /backdrop/screen0/monitoreDP-1/workspace1/last-image -c xfce4-desktop
  #/home/myusername/2.png
  xfconf-query -p /backdrop/screen0/monitoreDP-1/workspace2/last-image -c xfce4-desktop
  #/home/myusername/3.png
  xfconf-query -p /backdrop/screen0/monitoreDP-1/workspace3/last-image -c xfce4-desktop
  #/home/myusername/4.png

  xfconf-query -p /backdrop/single-workspace-mode -c xfce4-desktop
  #false
  xfconf-query -p /backdrop/screen0/monitoreDP-1/workspace2/last-image -c xfce4-desktop --set /home/myusername/33.png
  xfconf-query -p /backdrop/screen0/monitoreDP-1/workspace2/last-image -c xfce4-desktop
  #/home/myusername/33.png

HOW TO SET AN ARRAY VARIABLE-TYPE PROPERTY (OF COURSE WITHIN A CHANNEL) (FOR OF COURSE THE XFCE4 DESKTOP ENVIRONMENT) WITH xfconf-query

  xfconf-query --channel xfwhatever \
    --property /whatever/whatever/whatever \
    --type string --set valueInIndex0 \
    --type string --set valueInIndex1 \
    --type string --set "$HOME/whatever/whatever/whatever.conf" \
    --force-array

SO YEEEAAAH xfconf-query RESEARCH

  # create a bool-type property in a channel
  xfconf-query $channel_options $property_options --create --type bool --set 'true'
  xfconf-query $channel_options $property_options --create --type bool --set true
  xfconf-query $channel_options $property_options --create --type bool --set false
  xfconf-query $channel_options $property_options --create --type bool --set 'false'

  #an array (30% sure) set property in a channel (so --type x 4 --set (value-to) x 4)
  xfconf-query $channel_options $property_options -t bool -t bool -t bool -t bool -s true -s true -s true -s true

  # create a number type (ie. double or int[eger])
  xfconf-query $channel_options $property_options --create --type double --set 0.000004
  xfconf-query $channel_options $property_options --create --type int --set -14

  # what type is a separator in a panel?
  echo string # value=separator

  # what if you try to --create (and --set) a property that already has been created..will the property just be 'set'?
  echo 3% yes

  # my panels aren't updating when I do my xfconf-query commands, what the FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
  xfce4-panel --restart

  # when you set an array it clears its [whole] previous contents?
  echo 13% yes
  
  # an easy way to set an array of strings in-for whatever property for whatever channel?
  xfconf-query $channel_options $property_options --reset --recursive #0% sure this is necessary
  values=(whatever whatever whatever whatever whatever)  #3% sure this is an array
  array_set_command=''
  for i in "${values[@]}"; do
    array_set_command+="-t string -s '$i' "
  done
  xfconf-query $channel_options $property_options --create $array_set_command --force-array
  #93% sure that would work

  #what the f is $channel_options and/or $property_options    ?
  channel_options='-c xfchannel_name' #get from xfconf-query --list
  property_options'-p /whatever/whatever/whatever' #get from xfconf-query $channel_options --list #(--recursive) ?? lol i'm 0% sure
  

BLAH BLAH BLAH BLAH BLAH UNIT CONVERSION IN BASH

  apt --simulate install units    #only one package, wahoooooooooo
  units 'psi(60)' hPa;
    4136.8544
  units 'tempF(70)' tempC;
    21.111111

THESE ARE ALL THE SAME IN BASH FOR ARITHMETIC

  echo '55758006.0 / 384400' | bc -l
  echo '55758006 / 384400' | bc -l
  echo '55758006/384400' | bc -l

`iotop` TO PRINT OUT A DECENT STDOUT OF WHAT PROCESSES ARE USING S (LIKE YOUR SWAP, BASICALLY)

  iotop --accumulated --batch --delay=15 --only #as root.
  #Total DISK READ:      1022.41 B/s | Total DISK WRITE:         0.00 B/s
  #Current DISK READ:      18.77 K/s | Current DISK WRITE:       0.00 B/s
  #    TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN      IO    COMMAND
  # 145538 be/4 root          0.00 B      0.00 B  0.00 %  0.12 % [kworker/0:1-mm_percpu_wq]
  # 147483 be/4 root          0.00 B      0.00 B  0.00 %  0.11 % [kworker/2:1-mm_percpu_wq]
  #   2003 be/3 root          0.00 B      4.00 K  0.00 %  0.10 % [jbd2/sda1-8]
  # 145538 be/4 root          0.00 B      0.00 B  0.00 %  0.13 % [kworker/0:1-events]
  # 147483 be/4 root          0.00 B      0.00 B  0.00 %  0.12 % [kworker/2:1-events]
  #   1983 be/1 username111  10.00 K      0.00 B  0.00 %  0.00 % pulseaudio --daemonize=no --log-target=journal
  #   1190 be/4 messageb      5.00 K      0.00 B  0.00 %  0.00 % dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only
units 49MiB/s KiB/s  #50176K/s
units 0.771883minutes seconds #46 seconds





BASH VS PHP7 IN BASH EXAMPLE

  #Problem description: (utf-8)
  Ok I need:    00:00:00   -    03:00:00     selected randomly in:    00:10:00    increments. 

  #This pretty much does it:
  php -r 'printf("0%d:%d0:00", rand(0,2), rand(0,5));'
  printf '%02d:%02d:00' "$((RANDOM % 3))" "$((RANDOM % 6 * 10))"

  #and this is ......900% too much
  tmp=$((RANDOM % 19)) ; printf '%02d:%02d:00' "$(( tmp / 6 ))" "$(( tmp % 6 * 10 ))"

  #but you said the problem specification:
  #me: 3% fuck the problem specification.
  


BASH: RENAME FILE TO ITS MODIFICATION DATE AS ITS FILENAME (ALMOST)

  date -d "@$(stat -c %Y fd625961ae365de474e313dc0a2f47ad.png)" +%Y%m%d_%H%M%S
  #20220803_021737

  #ie. August 03, 2022 @ 2:17 AM

BASH: COLORS AND BOLD TEXT??

  man tput | grep -Fi bold #for bold for example

  html2bash_colored="${html2bash_colored/<blue>/\\e[34m\\e[47m}"
  html2bash_colored="${html2bash_colored/<\/blue>/\\e[0m\\n}"
  html2bash_colored="${html2bash_colored/<red>/\\e[31m\\e[47m}"
  html2bash_colored="${html2bash_colored/<\/red>/\\e[0m\\n}"
  html2bash_colored="${html2bash_colored/<green>/\\e[32m\\e[47m}"
  html2bash_colored="${html2bash_colored/<\/green>/\\e[0m\\n}"
  html2bash_colored="${html2bash_colored/<blue>/\\e[34m\\e[47m}"
  html2bash_colored="${html2bash_colored/<\/blue>/\\e[0m\\n}"
  html2bash_colored="${html2bash_colored/<black>/\\e[30m\\e[47m}"
  html2bash_colored="${html2bash_colored/<\/black>/\\e[0m\\n}"
  html2bash_colored="${html2bash_colored/<black_bold>/\\e[30m\\e[1m\\e[47m}"
  html2bash_colored="${html2bash_colored/<\/black_bold>/\\e[0m\\n}"
  html2bash_colored="${html2bash_colored/<magenta>/\\e[35m\\e[47m}"
  html2bash_colored="${html2bash_colored/<\/magenta>/\\e[0m\\n}"
/media/xubuntu/MYDEB_BOOT/boot/grub/grub.cfg
line 32



BASH: `printf` .. how do I print out a string with %s but I want the newline character to "expand"

  #dangerous but OK
  s='line 1\nline 2\nline 3\n'
  printf '%b' "$s"

  printf '%s' $'line 1\nline 2\nline 3'   #30% sure this would work

  #<BLOOPERS>
  #printf '%s' "$s"     #outputs:     line 1\nline 2\nline 3\n
  #printf '%s' $'$s'    #outputs:     $s
  #</BLOOPERS>


BASH: CAN `printf` (A BASH-BUILT-IN [COMMAND[?]/CODE-FUNCTION_WHATEVER_THE_FU]) MESS UP?

  echo Well, there is only one command option for printf.. -v
  printf '%s\n' -v
  #-v
  

  echo So printf is safe. 93% safe.


BASH: THERE IS MORE THAN ONE WAY TO PRINT A UTF-8 CHARACTER(s)/STRING

  s='дa'
  echo "$s"             #<-------- WINNER: shortest.
  printf %s "$s";echo   #<-------- SECOND-PLACE-WINNER: safest.
  printf %s "дa";echo   #<-------- THIRD -PLACE-WINNER: alternative.
  printf %s $'дa';echo  #<-------- THE MOST STUPIDEST AWARD GOES HERE
  printf %q "$s";echo   #<-------- THE MOST SURPRISING AWARD GOES HERE
  printf %q "дa";echo   #          (same)
  printf %q $'дa';echo  #          (same)
  echo $'дa'            #<-------- THIS ONE IS 3 (ie. if you like need the string inside to extrapolate..sounds dangerous though if your term is <UTF-8 set.
  unset s


BASH: `printf` RESEARCH

  bignum=233944
  printf %09d "$bignum"   #output:    000233944

  warn(){   #BASH warn function/subroutine
    printf '%s\n' "$*" >&2
    #alternative:
    #printf >&2 '%s\n' "$*"
  }

  strAlignMe='123'
  #how about right? and then left?
  half_screen_width_basically="$(( $(tput cols) / 2 - 3 ))"
  printf "%${half_screen_width_basically}s  %-${half_screen_wdith_basically}s\n" "$strAlignMe" "$strAlignMe"

GNU/LINUX ASSEMBLY WITH NASM: ASSEMBLE, COMPILE, "LOOK" AT THE OUTPUT, THEN REMOVE COMPILED AND BULL FILE

  nasm -felf64 my-first.nasm && \
    x86_64-linux-gnu-ld.bfd --output=my-first my-first.o && \
    file my-first

  rm -v my-first
  rm -v my-first.o

DEBIAN GNU/LINUX BASH-COMMAND (OR WHATEVER) FOR LOOKING-UP WORDS IN A FUING DICTIONARY YOU DU BI

  apt -s install sdcv
  links2 https://huzheng.org/stardict/ #look for "DICT" file links and download them all..idee
  sudo cp -iv ~/Downloads/*.dict /usr/share/stardict/dict/ #or whatever the f
  sdcv shit #look-up the word 'shit', which is 96% [on average] the definition of all words.
  #boom

USING fdisk AND lsblk AND mkfs.fat AND mkfs.vfat (SAME THING) ON BASH IN GNU/LINUX (DEBIAN 11.4???)

  exit 0
  #Assumption: this script is being ran as root somehow
  #Assumption: /dev/sdb has a ms-dos partition filesystem in-place
  #Assumption: /dev/sdb has 0 partitions
  #Assumption: you want a /dev/sdb1 partition that is FAT32
  #INFO: W95 FAT32 type == vfat partition == fat 32 partition == FAT32 partition

  #create the base-partition
  fdisk /dev/sdb
  #n<CR>
  #<CR>
  #<CR>
  #<CR>
  #w<CR>

  #-F32         #100% optional
  #-c           #90% optional (extensive hdd/hardware check)
  #-n $MYLABEL_10CHARACTERS_LONG_SPACE_PADDED_TO_THE_RIGHT  #90% sure it's 10 characters
  #-v           #900% optional (verbose [debugging[?]] output)
  mkfs.fat -F32 -c -n MYFAT34 -v /dev/sdb1

  #900% optional bull
  fdisk -l | perl -00 -ne 'if(/sdb/){print;}'
  lsblk --ascii --fs | grep -F sdb


  #<BLOOPERS>
  #sh -c 'cat /dev/zero > /dev/sdb'   # dd if=/dev/zero of=/dev/sdb
  #fatlabel /dev/sdb1 MYFAT34
  #</BLOOPERS>

BASH: WHAT APPLICATIONS ARE (CURRENTLY) RUNNING ON MY GNU/LINUX PC (IE. weechat, ffplay)?

  w

BASH DEBIAN GNU/LINUX WITH ``dd'' COMMAND HOW CAN YOU ZERO-OUT A UUHHH BYTE-LOCATION WITHIN ...WHATEVER?? RESEARCH

  #0% right but something like this:
  #dd if=/dev/zero iflag=skip_bytes skip=1024 of=file.dat   #make all of its data zeroes @ decimal_byte_address=1024 and after????
  #FIXME: what about range?

USING `dd` AND `shred` ON A HARD DRIVE???????????? YEEAAAAAHHH EXAMPLES

  #note: /dev/sda is typically your in-house-in-PC-integrated-HDD/SSD, /dev/sdb is your first USB-HDD, /dev/sdc is your second USB-HDD.
  sudo dd if=/dev/zero of=/dev/sdz        #zero-data
  sudo dd if=/dev/urandom of=/dev/sdz     #10101011100101010100001010101100 data
  sudo shred --force --verbose --zero /dev/sdz    #-f 99% optional
                                                  #-v 100% optional
                                                  #-z is a 9 [ie. good] so that your drive doesn't look like a giant octopus when you try to go `file -s` on it.


STRING VARIABLE FUNCTIONS IN BASH SHELL SCRIPTING WHATEVER:  trim_whitespace_left_and_right_of_string, touppercase(), tolowercase(), lc(), uc(), ltrim(), rtrim() YOU FIGURE IT OUT

  #just..figure it out.
  str_trim(){
    local args="$*"
    [ -z "$args" ] && return 0
    args="${args#"${args%%[![:space:]]*}"}"
    args="${args%"${args##*[![:space:]]}"}"
    echo -n "$args"
  }
  str_tolowercase(){
    echo "$*" | tr A-Z a-z
  }
  str_touppercase(){
    echo "$*" | tr a-z A-Z
  }

WHAT'S THE QUICK-FIX TO GETTING MY TOUCHPAD TO CLICK IN DEBIAN WHEN I "CLICK"[?] MY FINGER OVER THE TOUCHPAD __________QUICKFIX_________ (XFCE4 Desktop Environment only)

  #well I'm glad you asked.
  #on my PC I go: (with XFCE4 Desktop Environment)
  xfconf-query -c pointers -p /DELL07DE00_06CB75C5_Touchpad/Properties/libinput_Tapping_Enabled --create --type int --set 1
  #TODO: Do I need to create a priori properties [that are above libinput_Tapping_Enabled] for this command to work?

  #XXX: put the better solution here.

MY GNU/LINUX CRASHES OR HAS TROUBLE BOOTING INTO MY FING DESKTOP ENVIRONMENT X-SERVER-ENVIRONMENT WHATEVER-THE_F GUI-S AHOLE

  #IE: Disable X server on boot. Disable Desktop Environment, Display manager on-boot. linuz kernel option to disable non-tty-sh on-boot graphics card issues.

  'e' at boot menu -->  ^linux .* systemd.unit=multi-user.target
                                  nomodeset                       (maybe)


  That is:   add:      systemd.unit=multi-user.target
             to your boot options.
             hit F10 to boot.
             should disable the GUI and boot fine. (At least with Debian 11 anyway.)

  If that fails try adding:         nomodeset
             to your boot options.
             hit F10 to boot.

  Either way..30% chance of success! yay.

HOW DID I GET MY CUSTOM /etc/apt/sources.list SOURCE OF DEBIAN PACKAGES TO BE AS FAST/LOCAL [DOWNLOAD SERVER] [IE. FASTEST/QUICKEST/CLOSEST] AS POSSIBLE?

  cat /etc/apt/sources.list
  deb https://debian.osuosl.org/debian/ bullseye main contrib non-free
  deb-src https://debian.osuosl.org/debian/ bullseye main contrib non-free

  apt --simulate install netselect-apt  #and good-fing luck

WHAT ARE THE BASIC COMMANDS A MAN WOULD EXECUTE IN A BASH SHELL, PER SE?

  apack/aunpack/gzip/bzip2/xz/tar, awk, basename/dirname, cat, column, cp/rsync, cut, df, diff, du, file, find, grep/egrep, head/tail, links/lynx/links2, ls, man/info/pinfo, mkdir, mktemp, paste, perl, perldoc, ps, rm, rmdir, sed, sleep, sort/shuf, tac, top, tr, uname, wc, wget/curl

GETTING MY XBOX ONE CONTROLLER TO ACTUALLY CONNECT THROUGH BLUETOOTH

  apt -s install sysfsutils
  sudo bash -c 'echo "" >> /etc/sysfs.conf;echo "/module/bluetooth/parameters/disable_ertm=1" >> /etc/sysfs.conf'
  sleep 1
  sudo systemctl restart sysfsutils
  sleep 2
  sudo systemctl restart bluetooth
  #and now pray

DEBIAN GNU/LINUX MAKE MY TOUCHPAD 'TAP-TO-CLICK' IE. 'TAP-TO-LEFT-CLICK' ON DISPLAY-MANAGER RESTART

  find /usr/share/X11/xorg.conf.d/40-libinput.conf
  9,000,000% find "touchpad"
  put this toward the end of the paragraph:

  Option "Tapping" "on"

  sudo systemctl restart display-manager #restart your GUI system

HOW DO I USE ``xrandr'' TO CHANGE MY display-manager RESOLUTION WHILE IN A xfce4-terminal OR SOMETHING?

  xrandr -s 1280x720  #XXX-FINAL_VERSION Set Screen/Monitor Resolution



``sort'' SORTS CASE-0-SENSITIVE IN BASH, HOW DO A SORT CASE-SENSITIVE IN BASH A LIST OF LINES [THROUGH A PIPE]?

  cat word_list.txt | perl -ne 'BEGIN{undef $/;}@a=split /\n/;@a=soft(@a);print join("\n",@a);' > word_list_uppercase_is_always_before_lowercase.txt


BASH FIRST-LETTER TO UPPERCASE, ALL TO UPPERCASE, FIRST-LETTER TO LOWERCASE, ALL TO LOWERCASE

  #DEFINITION BY EXAMPLE

  hello=hello
  echo "${hello^^}"
  HELLO
  echo "${hello^}"
  Hello
  echo "${hello,}"
  hello
  echo "${hello,,}"
  hello

  hello=HELLO
  echo "${hello^^}"
  HELLO
  echo "${hello^}"
  HELLO
  echo "${hello,}"
  hELLO
  echo "${hello,,}"
  hello





cd /usr/local/bin && ln -s /usr/bin/mousepad #THE COOL WAY TO MAKE A SYMBOLIC LINK




WHAT IS HAPPENING WITH ``ln --symbolic --verbose ./dir link1; ln -sv ./dir link1''?????

  TODO: FIXME
  mkdir -p ~/Downloads/whatever
  cd ~/Downloads/whatever
  mkdir dir
  ln -sv ./dir link1
  cd link1
  realpath .   #/home/user55b/Downloads/whatever/dir
  cd ..
  ln -sv ./dir link1   #WHAT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

SLEEPING FOR RANDOM FLOAT (OR INTEGER) SECONDS IN GNU/LINUX IN BASH?

  #sleep_rand 10.9 40.2
  #sleep-rand 10.9 40.2
  #sleeprand 10.9 40.2
  sleeprand_for="$( echo $(( RANDOM % ( 402 - 109 ) + 109 )) / 10 | bc -l)"
  echo sleep $sleeprand_for
  sleep $sleeprand_for
  #IOW:
  #sleep $( echo $(( RANDOM % ( 402 - 109 ) + 109 )) / 10 | bc -l)

BEST CHECKSUM CALCULATION FOR A FILE FOR SURE ON GNU/LINUX IN BASH

  for i in {1..30}; do echo $i >> hello; crc32 hello; done
  6751fc53
  69e17861
  775f54d8
  3fc1a5b3
  6a69ac8a
  361c9fff
  c29f1e6e
  b7e2fecf
  b9efd523
  138abfeb
  37e75f02
  d78409c3
  66a80e25
  f91fce65
  0e61831a
  888b9230
  b74c48b7
  aa7923c4
  356fb2de
  6bd49ffd
  345d66b0
  36284acf
  69c0bafc
  bac1fc5a
  af0b340f
  96c3fd6a
  4e43e35c
  d0c4da96
  28bf63e6
  5e9e6775

  #4 bytes. Of data. Represented by hexadecimal encodations fo-sho
  #XXX: what if we converted each 2-characters to 1 decimal number (ie. between 0 and 255)?  900% yes


HONEYPOT PORT 80 IN BASH WITH NETCAT AS BASICALLY AN HTTP SERVER (IE. HTTPD) IN GNU/LINUX IN BASH

  #for IPv6 [address]:
  while [ 1 ]; do sudo netcat -l -p 80 >> ~/port80.log; sleep 0.2; done
  #for IPv4 [address]:
  while [ 1 ]; do sudo netcat -l -6 -p 80 >> ~/port80.log; sleep 0.2; done

WATCH FILE CHANGES/ADDITIONS [ALTERATIONS??????] IN BASH

  touch "$HOME/stupid"
  watch_this_file="$HOME/.weechat/logs/irc.libera.user9d.weechatlog"
  while [ ! -f "$watch_this_file" -o "$watch_this_file" -ot "$HOME/stupid" ]; do
    sleep 26.113;
  done
  printf '%s\n' "$watch_this_file changed!!!!!!!! AAAAAAAAAAHHHHHHHHHHH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"


GIT: HOW TO AUTOUPDATE MY MAIN/MASTER[?] REPOSITORY 9,000,000% SIMPLY

  #assuming you are in your repository directory [ie. the cloned[?] directory [ie. with the .git directory]]
  [[ "$(git status | wc -l)" -gt 4 ]] && { git add -A; git commit -m "changeID$RANDOM"; git push }

sudo su ALTERNATIVES FOR BASH IN GNU/LINUX?

  sudo su  #is 900. However, this is +23% better:
  sudo -i  #be root @ /root
  sudo -s  #be root @ $CWD

USING TACTUL BASH WAY TO EXTRAPOLATE ECHO ALL FOR LOOP THROUGH ALL DIRECTORIES WITHIN A DIRECTORY

  echo **/

  #<EXAMPLE>
  #assuming we're in ~
  for i in **/; do
    echo "directory:      ~/$i"
  done
  #</EXAMPLE>

  #<BLOOPERS>
  echo */    #apparently is 100% of the above.. :/ hmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
  #</BLOOPERS>

C PROGRAMMING INTEGERS DOUBLES FLOATS SHORTS NUMBERS

  doubles, floats => double64
  int /* >=16-bit */, int32, intmax_t, long int /* 32-bit */, long long /* same as long int */, short, uint, uintmax_t => int64

  int64 n = MAX_INT64; printf("%lld\n", n); /* I'm 99% sure this will work*/

  int64 nWhatever = 0; 
  double64 nWhatever2 = 0.0;

  printf("int64: %lld\n", nWhatever);
  printf("double64: %lf\n", nWhatever2);
  //      XXX: gcc --arch=x86_64  79% yes.



DNS BYPASS /etc/hosts GET IP ADDRESS OF DOMAIN NAME ADDRESS HOSTNAME HOST NAME

  dig +short google.com AAAA
2607:f8b0:400a:807::200e
  dig +short google.com A
142.251.33.110

  ping4 -c 1 google.com
    PING  (127.0.1.1) 56(84) bytes of data.
    64 bytes from 10.client-channel.google.com (127.0.1.1): icmp_seq=1 ttl=64 time=0.036 ms
    ...
  ping4 -c 1 localhost
    PING  (127.0.0.1) 56(84) bytes of data.
    64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.034 ms
    ...
  ping6 -c 1 google.com
    PING google.com(localhost (::1)) 56 data bytes
    64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.064 ms
    ...
  ping6 -c 1 localhost
    PING localhost(localhost (::1)) 56 data bytes
    64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.050 ms
    ...


GNU/BASH

  file_path='whatever.mp3'; file_extension="${file_path##*.}"; file_path_with_extension_stripped="${file_path%.mp3}" #ie. strip extension, strip_extension

Segmentation Fault. ERROR/EXIT CODE FOR THE PROCESS

  139



sudo screendump > ~/tty-vt-screenshot.txt




DISPLAY Bash 5 VARIABLE TO REFERENCE THE MONITOR/SCREEN/X11/X/X-SERVER/XORG/DISPLAY-MANAGER/LIGHTDM    :0  or  :0.0   DISPLAY=:0 xeyes -geometry 956x45+0+0


SIMULATE EMULATE MOUSE CLICKS KEYBOARD USING XTEST INTO DISPLAY-MANAGER X SERVER X11 XORG

sudo apt install xmacro
echo MotionNotify 0 0 | xmacroplay :0.0 #ie. move mouse to top-left of screen, x=0px, y=0px
sleep 1.2
echo MotionNotify $move_mouse_to_x $move_mouse_to_y | xmacroplay :0  #xinput --mouse-mouse $move_mouse_to_x,$move_mouse_to_y
printf '%s\n%s\n' 'ButtonPress 1' 'ButtonRelease 1' | xmacroplay :0   #xinput --left-mouse-click, default Delay between commands is 0.010 seconds, move mouse and click it


GNU/LINUX NETWORK CONCERNS PACKETS FLYING ALL OVER THE PLACE WITH jnettop

  #a Firewall sounds like a >-5,000,000% feature for this OS within forever

  ping6 'ff02::1:fffa:93d1' #is me
  ping6 'fe80::4b7:27ff:fe7a:b176' #is my AP

  # my AP sends me ICMP6 on port 135
  # me responds to AP ICMP6 on port 135 as tsoh
  #XXX 99% sure this is an ECHO REQUEST
  #XXX 99% sure this is a built-in kernel -5,000,000% feature
