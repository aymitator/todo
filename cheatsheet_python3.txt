
#In Python3 LIST === ARRAY, array === list, list == array, ARRAY == list, List == Array == ArrayList
#we will be using the word Array [as TypeArray as List as ArrayList as TypeList as ListType]

#In Python3 tuple === ConstVoid*
#we will be using ConstVoid*

#In Python3 TypeBoolean === TypeBool === Bool === Boolean
#we will be using the word Boolean [as TypeBoolean as TypeBool as Bool]

#In Python3 TypeString === TypeUTF8String === String
#we will be using the word String [as UTF8String as TypeString as TypeUTF8String]



#In Python3 str === built-in
#Therefore, utf8 is 9 for String variable Types




String fxns (in,not in)
from str (.center,.count,.find,.index,.isdigit,.isalpha,
  .join,len,.ljust,.lstrip,.rjust,.split)
myarray = [1, 2, 3]
mytuple = (1, 2, 3)
myarray = list(mytuple)
Array fxns (.append [.push],.clear,.copy,.count[.length],.extend,in[.find],.index,
  .insert,list,not in,.pop,.remove,.reverse,.sort)
  (use len(list) to get count/size of array)
Dict/Hash fxns (.values,.keys,in,not in)
mydict = { 1:'sup', 's':'a value' }
Variable fxns (False [false],int [signed int64],is,None [undef, null],range [`seq`],repr,str [float2string],True [true],type)
Math fxns (**,pow,round)
from float (.is_integer)
from math import (ceil,degrees,*e,fabs,*pi,radians,sqrt)
from os import unlink [`rm`],stat
from platform as isx86_64 #isx86_64.machine() == 'x86_64'
from random import choice,gauss,randint,shuffle
from re (.compile) #search compile on this page.
from struct import pack, unpack


str() /*in Python3*/ == String Object.toString(Object _o) == toString(Object _o);
int() /*in Python3*/ == Integer Object.toInteger(Object _o) == toInteger(Object _o);


#all 3 Math.floor() options:
int(3.14159265358979323846264338327950288419716939937510) #3 [therefore int[eger] [therefore class 'int' [type]]]
import math; floor(3.14159265358979323846264338327950288419716939937510) #3
3.14159265358979323846264338327950288419716939937510 // 1 #3.0 [therefore float [therefore class 'float' [type]]]

szFromStdin.strip('\n')   #<----------chomp string



variableNameInString=3.14;s1=str(variableNameInString);s2=f"{variableNameInString}";print(f"Three times: {variableNameInString}, {s1}, {s2}") #Three times: 3.14, 3.14, 3.14



system('mkdir --parents /tmp/1/2/3/4') #OR:
import os;os.makedirs('/tmp/1/2/3/4')



utf8 = '123'
array = [1,2,3,4]
#1) TypeInteger == TypeInteger within TypeArray; inArrayAsString() inAsInteger()
#2) TypeSubStr == TypeString within TypeString, ie, indexOfIfTrueReturnsTrue() as strcontains()
if '1' in utf8 and 1 in array:  #
  print(True)                             #True As TypeBool As TypeBoolean As Boolean
  print([True])                           #[True] As String
  print(str(True))                        #True As String
  print(repr(True))                       #True As String




import inspect  #print(inspect.currentframe().f_lineno)  print __LINE__;



#---------------------------------------------------------------------------------

def file_get_contents(_filename):
  ret ''.join(open(_filename, 'r').readlines())

#---------------------------------------------------------------------------------

#<DATETIME>
import datetime
print(datetime.datetime.now())
#2022-09-17 07:25:50.427042
#2022-09-17 07:25:54.357964
#2022-09-17 07:25:56.059329

from datetime import datetime
my_datetime = datetime.strptime("25/12/22 00:00", "%d/%m/%y %H:%M") #string_of_Datetime_representation_2_datetime_object()
print(repr(list(my_datetime.timetuple())))  #Datetime_object_2_string()
#[2022, 12, 25, 0, 0, 0, ...]
# %Y    %m  %d %H %M %S
print(repr(list(datetime.now().timetuple())))
#[2022, 9, 17, 7, 51, 11, ...]
# %Y    %m %d  %H %M  %S

#Simple datetime
from datetime import datetime
my_datetime = datetime.now()
print(f'It is now {my_datetime.month}/{my_datetime.day}/{my_datetime.year}')
#It is now 9/17/2022
#</DATETIME>

#---------------------------------------------------------------------------------
DEBUGGING:

#assuming we have a mystery variable named v
print(v)
#next [try]:
print(type(v), repr(v))
#next [try]:
import pprint from pprint
pprint(v)
#---------------------------------------------------------------------------------

<TODO>
  #these are called "protection bits" in os.stat that yield a tuple () VS a array [] that has the data in stat_result.st_mode
  is_writable() is_writeable() is_executable()  #XXX:???? for files and directories [executable makes a directory to see its contents]
  is_readable() #TODO: fixme
  #XXX: what about the owner? XXX-followup: current_user? XXX-followup2: other_users?
</TODO>
https://docs.python.org/3/library/pathlib.html#module-pathlib
https://docs.python.org/3/library/os.path.html#module-os.path
get_file_last_modified('/etc/bashrc')
is_regular_file?()
is_dir?()   #ie.      os.path.isdir(szPathIGuess); #after import os;
is_symbolic_link?()
pydoc os
cd() #chdir()
chmod()
chown() #pydoc shutil.chown()
cp()    #pydoc shutil.copyfile()
cp-R()  #pydoc shutil.copytree()
df()    #pydoc shutil.disk_usage('/')
env()   #getenv('PATH')
file_get_last_access_timestamp()
file_get_last_change/mod_timestamp()
file_get_size()
file_get_temp() #tempnam(), tmpfile(), tmpnam()
  #pydoc tempfile
file_get_owner()
file_make_archive() #pydoc shutil.make_archive
file_open()         #open()
file_read_line-by-line() #pydoc fileinput
file_seek(f,0)   #go back to the beginning...bi***.
ln(target, name) #symlink()
ls()    #aka. dir, listdir. show directory/folder contents
mkdir() #aka. makedirs()
mv()    #aka. rename()
process_kill(ID, SIG) #kill_process
process_get_owner #geteuid() get THIS process.
ps_user_owner()   #(current processes)
pwd()      #getcwd()
rm()       #aka. remove(), removedirs(), rmdir()
rm-fr()    #pydoc shutil.rmtree()
system()
  import os;os.system('echo BEHOLD THE POWER OF $SHELL; echo I AM `whoami` @ $PWD')  #aka. exec(). Bash shell scripting.
  #BEHOLD THE POWER OF /bin/bash
  #I AM user0c3a06 @ /home/user0c3a06
touch()    #aka. utime(). set times for file.
username() #getlogin() get current user's login name. os.getlogin()
which()    #pydoc shutil.which(str_cmd)

#---------------------------------------------------------------------------------

import sys
try:
  a = 3 / 0
except Exception:
  sys.exit(0)

SYNTAX NOTES:
inside ( ), [ ], { } indentation 0% matters

#printf alternative examples:
moon_phase = 0.4931260130136699
print('%-38s' % ('{}{} units'.format('moon_phase=', moon_phase)), end='')
super_accurate_almost_moon_percent = moon_page
print('{}{}'.format('moon_percent=', '%0.2f%%' % (super_accurate_almost_moon_percent * 100.0)))

#!/usr/bin/python3
if __name__ == '__main__':
  for _ in range(0, 2): #the '_' variable is encouraged as a temporary varibale to use even if you don't use it within the ranged-loop
    print('blah')




if __name__ == '__main__':
  import sys  #XXX you can import WITHIN a function!
  make_html_images_inline(sys.argv[1], sys.argv[2])
  try:
    import magic #XXX you can import WITHIN a scope!
    return magic.from_file(sys.argv[1], mime=True)





#N-BASE BINARY HEX STRING ANY-BASE STRING INTO NUMBER/UINT/INTEGER/UNSIGNED_INTEGER VALUE
print('{}'.format(int('00000010', base=2) + 1)) #3
print('{}'.format(int('ff', base=16) + 1))      #256
#---------------------------------------------------------------------------------

#XXX FAQ 0001: slurp a file [whatever it is [39% chance a UTF-8 text file]]?
with open(str_pathname_to_text_file, 'r') as f:
  all = f.read()
#f auto-closes

#XXX^^^^ should the open(*) and read() be wrapped with a try: catch:?

#XXX FAQ 0002: How do I test how long a very short Python 3 script executes for?
python -m timeit 'import time;time.sleep(0.001)'
#200 loops, best of 5: 1.16 msec per loop

#XXX FAQ 0003: How do clamp/restrict number ranges say between 0% and 100% for all real numbers?
for i in -5000000 -2 20 80 100 102 9999999999; do python3 -c 'import sys;val=float(sys.argv[1]);print(min(max(val, 0.0),100.0))' $i; done
#0.0
#0.0
#20.0
#80.0
#100.0
#100.0
#100.0

#XXX FAQ 0004: How do I accept $ARGV[1] [?] OR slurped/all of STDIN as variable input in my Python 3 program/application/script?
  #!/usr/bin/python3
  import sys
  if __name__ == '__main__':
    if len(sys.argv) > 1:
      str_input = sys.argv[1]
    else:
      str_input = sys.stdin.read()

    print('Input:', str_input)

#XXX FAQ 0005: How do I slurp all of STDIN in variable ``str_all_stdin''?
  str_all_stdin = sys.stdin.read()
  
#XXX FAQ 0006: How to iterate through a while loop while incrementing the iterator through the while block conditional?
  #!/usr/bin/python3
  if __name__ == '__main__':
    n = 1
    #Trying to iterate through a while loop while incrementing the iterator through the while block conditional?
    #while n++ < 4:    #WRONG. even while (n+=1) < 4: #0% works
    #  print(n)
  """
    File "/home/xubuntu/Downloads/./whatever.py", line 5
      while n++ < 4:
                ^
  SyntaxError: invalid syntax
  """
    #CORRECT:
    for n in range(1, 4):
      print(n)

#XXX FAQ 0007: How to read a text file character-by-character?
  #!/usr/bin/python3
  import sys
  if __name__ == '__main__':
    f = open(sys.argv[0], 'r')
    all = f.read()
    f.close()
    f = None

    for addr in range(0, len(all)):
      if addr < 19:
        continue
      if addr > 28:
        break
      print('Character @ addr {} is {}'.format(addr, all[addr]))
      
    all = addr = None

  """
  Character @ addr 19 is i
  Character @ addr 20 is m
  Character @ addr 21 is p
  Character @ addr 22 is o
  Character @ addr 23 is r
  Character @ addr 24 is t
  Character @ addr 25 is  
  Character @ addr 26 is s
  Character @ addr 27 is y
  Character @ addr 28 is s
  """

#TODO #001) What is this?

adict1 = dict[str, str]
adict2 = dict[str, dict[str, tuple[str, str]]]


arrays [] and types () are 300% similar.
I recommend using arrays for everything.
When you see a tuple you can convert it to a array with list(())
You should get the built-in function when you go `pydoc3 list` instead you get list class bullsh**. F*** YOU PYTHON.
Arrays are used 2x more than Tuples.

#---------

[int(s) for s in "123a".split() if s.isdigit()]
#==============is equivalent to:
l = []
for s in '123 12 asdf'.split():
  if s.isdigit():
    l.append(int(s))

#---------------------------------------------------------------------------------
#
# BINARY FILE SLURPING INTO A bytearray
#
#!/usr/bin/python4.pl

import sys

#open this script's filename and print out its binary representation as a string
with open(sys.argv[0], 'rb') as my_file_handle:
{
  my_file_handle.seek(0, 2) #IE. seek from offset 0 to SEEK_END
  all_data_bytearray = bytearray(my_file_handle.tell()) #ie. create an empty bytearray with size=my_file_handle.tell()
  my_file_handle.seek(0)
  my_file_handle.readinto(all_data_bytearray)
  print(all_data_bytearray.hex())
}
#---------------------------------------------------------------------------------

print(r'\n\n\n\n')#\n\n\n\n gets printed.
print('\n\n\n\n') #these last two are the same.
print("\n\n\n\n")

#---------
# Which is better? (ie. the first print or the second print)
v1 = 1;v2 = 2
print('{}, {}'.format(v1, v2))  #EH
print('%02d, %02d' % (v1, v2))  #`pydoc FORMATTING` EEHH
print(f'{v1}, {v2}')            #good
print(f"{v1}, {v2}")            #(same thing)
print(v1, v2, sep=', ')         #<----------------------------BEST (works even with accessing arrays & tuples!

#---------BEGIN TUPLE ARRAY
print(type((True))) #bool
print(type((True,))) #tuple

print(True == (True,)) #False: a type tuple with contents (True) is not equal to a type bool with value True
print(True == [True])  #False: a type array with contents [True] is not equal to a type bool with value True

#now these are True:
print(tuple([True]) == (True,))
print(array((True,)) == [True])

print(tuple([]) == ()) #True: a array converted to a tuple is a tuple
print(array(()) == [])  #True: a tuple converted to a array is a array

#<ALL OF THESE ARE FALSE>
print('' == [''])
print('' == ('',))
print('True' == True)
print([True] == True)
print((True,) == True)
print('False' == False)
print([False] == False)
print((True,) == True)
#</ALL FALSE>

print(() == []) #False
print(() == ()) #True: a tuple is a tuple
print([] == []) #True: a list is a list
print(tuple([]) == ()) #True: a list converted to a tuple is a tuple
print(list(()) == [])  #True: a tuple converted to a list is a list
mylist = list(sys.argv); #this readonly tuple can now be edited as a list
mylist.append('cannot do this with a tuple')
mylist.reverse()
mylist.sort()
print(mylist)
#---------END TUPLE LIST BULLSH**

import random
l = [1,2,3,4,5]
random.shuffle(l)
print(l)

mydict = {1:'sup', '2':'value'}
print(repr(mydict)) #{1: 'sup', '2': 'value'}
if '1' in mydict:   #NO
  print(mydict['1'])
if 2 in mydict:     #NO
  print(mydict[2])

f = open('readthis.txt') #default is reading
ar = f.readlines()
print(repr(sz)) #['line 1\n', 'line 2\n', 'line 3']
ar.append("\na new line bi***")
f.close()
f = open('readthis.txt', 'w') #'w+' or 'a' to auto-create
f.writelines(ar)              #'w+' auto-purges

if ! False:
  print('syntax error')
if not False:
  print('this works')
  
print('hello'.isalpha()) #True
print('hello'.isdigit()) #False

print(type((1,2,3))) #<class 'tuple'>
print(type([1,2,3])) #<class 'list'>

for i in range(0, 3, 3): #increment by 3
  print(i)  #0
for i in range(0, 4, 3): #increment by 3
  print(i)  #0.3.
  
from random import randint,choice
myar = ('q','w','e','r','t','y')
for i in range(1,2):  #1
  print(randint(5,6)) #5 or 6
  print(choice(myar))

ar = (1, 2, 3)
print(ar * 3) #(1,2,3,1,2,3,1,2,3)
ar = [1, 2, 3]
print(ar * 3) #[1,2,3,1,2,3,1,2,3]

print(repr('sup\n')) #'sup\n'
print(type('sup\n')) #<class 'str'>

python -c "print('hello'.rjust(10))"
#     hello

#string slice/substring
v = 'sup'
v[-1:]    #'p'
v[-2:-1]  #'u'

i = int(input('Enter a number: '))
if i == 0:
  print('found 0')
elif i == 1:
  print('found 1')
else:
  print('found unknown')

myString = 'Y'
if myString.lower() in ('y', 'yes'):  #ie.  if myString.lower() == 'y' or myString.lower() == 'yes':
  print('You have won!')

import re
# the r'' allows you to put escapes in your string. it's called a raw string.
if re.compile(r'my?reg\d\d\d\d\d\d\d\d', re.IGNORECASE).search('abcdefghijklmreg12345678no'): print('gotcha')

import re
print(re.compile('my?reg', re.IGNORECASE).search('abcdefghijklmregno'))
#<_sre.SRE_Match object; span=(12, 16), match='mreg'>
https://docs.python.org/3/library/re.html#match-objects

hello = False or True
print(hello,1,2,3, end="", sep="") #True123

def fib(num):
  x, y = 0, 1
  while x < num:
    print(x, end=' ', sep='', flush=True)
    x, y = y, x+y
  print()
fib(200) #0 1 1 2 3 5 8 13 21 34 55 89 144

mylist = ('column 1', 'column 2', 'column 3', 'column 4');
print(' | '.join(mylist[-2:]));

'''This is a comment.
multi-lined :D
'''

def subroutine_name(name=None, whatever=None):
  if name:
    print('your name must be ' + str(name) + '. Interesting.')

ar1 = [1,2,3] #list
ar2 = (1,2,3) #tuple
ar1.insert(0, 'first')
#ar2.insert(0, 'first') ERROR
print(ar1)

myar = [1,2,3,4,5,6]
del myar[0]   #0=>1
del myar[0:1] #0=>None, 1=>2
print(myar)   #[3,4,5,6]
del myar[:]   #now an empty list. (myar.clear()) still accessible as an empty list
del myar      #can never access myar again. (TODO: this feels 0% clear. So it's basically None??? And then you can set it to a list again in the future???)
myar = [1,2,2,3,3,3]
myar.count(3) #3  IE. "count how many times this value is in the array"

myar = [1,2,3,4,5,6]
del myar[0]
myar.insert(0,1)
del myar[0]
print(myar) #2,3,4,5,6
print(myar.index(6))  #IE. "find location where value=6"
                      #=4

myar       = [0,1,2,3,4,5,6]
myar.pop(2)
print(myar) #[0,1,  3,4,5,6]

myar = [0,1]
myar.extend((2,3))        #IE. "extend the list/array with these fresh values"
myar[len(myar):] = (4,5,6)#IE. (samething)
print(myar)

#does it look like a number?
import numbers
ar = (1,'sz',2.6,'sz3333',3)
for value in ar:
  if isinstance(value, numbers.Number):
    print(str(value) + ' looks like a number')
  else:
    print(value + ' looks like a string')
(6.11111).is_integer() # False.
for value in b'to integers and beyond!':
  print(value)

for n in range(5): #0..4
  print(n)
for n in range(1,10): #1..9
  print(n)
ar = list(range(5))
ar.insert(0, 'first')
print(ar)

key = True
value = False
assert(key is not False and value is not True)
v = 'hello'
assert isinstance(v, str)
assert v.replace('.', '').replace('-', '').replace('_', '').isalnum()

print chr(97) #'a'
from struct import unpack
print(unpack('c', bytes(chr(97), 'ASCII'))) #(b'a',)

var = None
if var == None:
  print('nothing')
if var is None: #preferred!
  print('still nothing')

keys = (1,3,2,4)
for k in keys:
  print(k)
  continue
  break

#like Data::Dumper() and crazzzy syntax :D
myar = [1,
2,3,4,[1],[],
                 3]
print(myar)

mystring = 'hello %d' % 500
print(mystring)
mystring = 'hello {}'.format(501)
print(mystring)

mystring = ('concat'
'this and' 'this')
print(mystring)

if 0 == '':
  print('sup1')
elif '' == False:
  print('sup1.5')
elif 0 == False:
  print('sup2') #DING!!!
else:
  print('sup3')

